(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{227:function(t,s,a){t.exports=a.p+"assets/img/js_02.378bfbff.jpg"},624:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"《javascript-语言精粹》-蝴蝶书"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#《javascript-语言精粹》-蝴蝶书","aria-hidden":"true"}},[t._v("#")]),t._v(" 《JavaScript 语言精粹》 蝴蝶书")]),t._v(" "),n("p",[n("img",{attrs:{src:a(227),alt:"js_01.jpg"}}),t._v("\n2012年9月 第2版")]),t._v(" "),n("p",[t._v("这是一本社区内比较有名的书籍，是 JSON 和 JsLint的作者 Douglas Crockford （道格拉斯.克罗克福德)所著。书中总结了 JavaScript 语言的“精华、鸡肋、糟粕”，即“好、中、坏”的部分。")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#毒瘤"}},[t._v("毒瘤")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-全局变量"}},[t._v("1. 全局变量")])]),n("li",[n("a",{attrs:{href:"#_2-作用域"}},[t._v("2. 作用域")])]),n("li",[n("a",{attrs:{href:"#_3-自动插入分号"}},[t._v("3. 自动插入分号")])]),n("li",[n("a",{attrs:{href:"#_4-保留字"}},[t._v("4. 保留字")])]),n("li",[n("a",{attrs:{href:"#_5-unicode"}},[t._v("5. Unicode")])]),n("li",[n("a",{attrs:{href:"#_6-typeof"}},[t._v("6. typeof")])]),n("li",[n("a",{attrs:{href:"#_7-parseint"}},[t._v("7. parseInt()")])]),n("li",[n("a",{attrs:{href:"#_8"}},[t._v("8. +")])]),n("li",[n("a",{attrs:{href:"#_9-浮点数"}},[t._v("9. 浮点数")])]),n("li",[n("a",{attrs:{href:"#_10-nan"}},[t._v("10. NaN")])]),n("li",[n("a",{attrs:{href:"#_11-伪数组"}},[t._v("11. 伪数组")])]),n("li",[n("a",{attrs:{href:"#_12-假值-falsy"}},[t._v("12. 假值 falsy")])]),n("li",[n("a",{attrs:{href:"#_13-hasownproperty"}},[t._v("13. hasOwnProperty")])]),n("li",[n("a",{attrs:{href:"#_14-object-原型链"}},[t._v("14. Object 原型链")])])])]),n("li",[n("a",{attrs:{href:"#糟粕"}},[t._v("糟粕")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1"}},[t._v("1. == / !==")])]),n("li",[n("a",{attrs:{href:"#_2"}},[t._v("2. ++ / --")])]),n("li",[n("a",{attrs:{href:"#_3-new"}},[t._v("3. new")])]),n("li",[n("a",{attrs:{href:"#_4-void"}},[t._v("4. void")])]),n("li",[n("a",{attrs:{href:"#_5-continue-语句"}},[t._v("5. continue 语句")])]),n("li",[n("a",{attrs:{href:"#_6-switch-语句"}},[t._v("6. switch 语句")])]),n("li",[n("a",{attrs:{href:"#_7-with-语句"}},[t._v("7. with 语句")])]),n("li",[n("a",{attrs:{href:"#_8-eval-函数"}},[t._v("8. eval 函数")])]),n("li",[n("a",{attrs:{href:"#_9-function-语句和-function-表达式"}},[t._v("9. function 语句和 function 表达式")])]),n("li",[n("a",{attrs:{href:"#_10-缺省块语句"}},[t._v("10. 缺省块语句")])]),n("li",[n("a",{attrs:{href:"#_11-类型包装对象"}},[t._v("11. 类型包装对象")])]),n("li",[n("a",{attrs:{href:"#_12-位运算符"}},[t._v("12. 位运算符")])])])]),n("li",[n("a",{attrs:{href:"#精华"}},[t._v("精华")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-函数是一等公民"}},[t._v("1. 函数是一等公民")])]),n("li",[n("a",{attrs:{href:"#_2-基于原型的动态对象"}},[t._v("2. 基于原型的动态对象")])]),n("li",[n("a",{attrs:{href:"#_3-字面量语法"}},[t._v("3. 字面量语法")])])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"毒瘤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#毒瘤","aria-hidden":"true"}},[t._v("#")]),t._v(" 毒瘤")]),t._v(" "),n("h3",{attrs:{id:"_1-全局变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 全局变量")]),t._v(" "),n("p",[t._v("许多语言都有全局变量，例如 Java 中的 public static 成员属性就是全局变量。 "),n("strong",[t._v("JavaScript 的问题不在于它使用全局变量，而在于依赖全局变量。")]),t._v(" JavaScript 没有像 Java 语言的链接器，JS 将所有编译单元都载入一个公共全局对象中。这样一来，一个全局变量可以被程序的任何部分在任意时间修改，这样就使得程序中的变量变得难以管理和复杂，降低了程序的可靠性。")]),t._v(" "),n("p",[t._v("在 JavaScript 中有三种定义全局变量的方式：")]),t._v(" "),n("ul",[n("li",[t._v("在全局作用域内声明一个变量，即成为全局变量")]),t._v(" "),n("li",[t._v("直接给全局对象添加一个属性，在浏览器中，即给全局对象 window 添加属性")]),t._v(" "),n("li",[t._v("隐式全局变量，即直接使用一个未经声明的变量")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),t._v("\nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("789")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 作用域")]),t._v(" "),n("p",[t._v("书中对作用域的批判主要在于 JS 中引用了 C 语言大括号的语法，却没有实现 C 语言块级作用域的限制，导致变量提升的问题。但是这点在最新的 ES6 语法中随着 let const 声明方式的加入，也实现了块级作用域的限制。所以这点在现代 ES 语法中已经不成立了。")]),t._v(" "),n("h3",{attrs:{id:"_3-自动插入分号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-自动插入分号","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 自动插入分号")]),t._v(" "),n("p",[t._v("作者的观点应该是提醒我们不要依赖 JS 中自动插入分号的机制，而更应该规范自身书写的代码，通过规范的代码去避开自动分号机制可能制造出来的问题。")]),t._v(" "),n("h3",{attrs:{id:"_4-保留字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-保留字","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 保留字")]),t._v(" "),n("p",[t._v("JS中保留字不能用来命名变量和参数，并且当使用保留字作为对象属性时必须使用引号括起来，不能用点引用。")]),t._v(" "),n("p",[t._v("我倒觉得这点倒不是什么问题，遵守在代码中不使用保留字就好了。")]),t._v(" "),n("h3",{attrs:{id:"_5-unicode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-unicode","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. Unicode")]),t._v(" "),n("p",[t._v("Unicode字符编码中，在第0平面（基本平面）的字符，都是用两个字节即16位表示一个字符，在辅助平面中，就要使用3或4个字节来表示一个字符。但在 JS 会将超过2个字节的编码视为两个不同的字符，此时对 String 类型相关的方法都会受到影响。比如"),n("code",[t._v("string.length")]),t._v("就会不准确。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u0041"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'🐄'")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\ud83d\\udc04'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u{1F404}'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true  \\u{1F404}是ES6语法对辅助平面内字符实体的表示。")]),t._v("\n")])])]),n("p",[t._v("这主要是因为历史时间先后的问题，在JS创建之初，Unicode字符集还只限于基本平台内，还没扩展到辅助平面的字符。目前在这点问题上，最新的 ES6 很多语法已经改善了这个问题。")]),t._v(" "),n("blockquote",[n("p",[t._v("更多关于字符编码的内容可以跳转至 "),n("router-link",{attrs:{to:"/FE-Language/ES/type-3-string.html#ucs-2编码"}},[t._v("字符串编码")])],1)]),t._v(" "),n("h3",{attrs:{id:"_6-typeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-typeof","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. typeof")]),t._v(" "),n("p",[t._v("对 typeof 操作符的问题主要集中在两点：")]),t._v(" "),n("ul",[n("li",[t._v("原始值类型检测除null外，都是准确的，返回小写的字符串类型名称，但"),n("code",[t._v("typeof null === 'object'")]),t._v("。")]),t._v(" "),n("li",[t._v("对象类型检测除函数Function对象类型外，都直接返回字符串 "),n("code",[t._v("object")]),t._v("。")])]),t._v(" "),n("p",[t._v("所以 typeof 适合用于检测基本类型数据。并且需要单独处理 Null 类型（通过严格相等判断 data === null）。")]),t._v(" "),n("blockquote",[n("p",[t._v("关于"),n("router-link",{attrs:{to:"/FE-Language/ES/type-7-checking.html#typeof"}},[t._v("typeof 检测原理")])],1)]),t._v(" "),n("h3",{attrs:{id:"_7-parseint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-parseint","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. parseInt()")]),t._v(" "),n("blockquote",[n("p",[t._v("似乎命名为 parseToInt 更好😅\n"),n("code",[t._v("parseInt")]),t._v("是一个把字符串转换为十进制整数的函数。它主要的问题在于：")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("parseInt('16') 与 parseInt(")]),t._v("16abc"),n("code",[t._v(")")]),t._v("结果一样，因为它遇到非数字时就会停止解析")]),t._v(" "),n("li",[n("code",[t._v("parseInt('08")]),t._v(")` 结果是 0 。因为函数遇到字符串的第一字符如果是 0 ，则会基于八进制而不是十进制进行求值。在八进制中，8和8以上都是字符，所以遇到第一个非字符，返回前面的结果。这种问题在用JS解析日期和时间时会出现问题。")])]),t._v(" "),n("p",[t._v("所以，对使用 "),n("code",[t._v("parseInt / parseFloat")]),t._v("这类函数，最好都指明第二个参数，明确要转换字符串的进制数。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" 第二参数批量当前参与转换的字符串 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09'")]),t._v(" 是一个十进制数\n")])])]),n("h3",{attrs:{id:"_8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8","aria-hidden":"true"}},[t._v("#")]),t._v(" 8. +")]),t._v(" "),n("p",[n("code",[t._v("+")]),t._v(" 运算符可以用于加法运算，也可以用于字符串的拼接，具体会如何执行取决于两边参数的类型。")]),t._v(" "),n("ul",[n("li",[t._v("如果两边运算子都是数值类型，则执行加法运算")]),t._v(" "),n("li",[t._v("如果有一边运算子是字符类型，则将剩余运算子转为字符串进行拼接。")])]),t._v(" "),n("p",[t._v("这个复杂的行为就是 Bug 常见的来源。所以打算用 "),n("code",[t._v("+")]),t._v("运算时，确保两边是同类型。")]),t._v(" "),n("h3",{attrs:{id:"_9-浮点数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-浮点数","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. 浮点数")]),t._v(" "),n("p",[t._v("这是一道经典的面试题："),n("code",[t._v("（0.1 + 0.2） ！== 0.3")]),t._v("。")]),t._v(" "),n("p",[t._v("这是大概分程序的通病，并不是 JS 一家之苦。因为它们都采用二进制浮点数算术标准（IEEE 754），就会有这个问题。")]),t._v(" "),n("blockquote",[n("p",[t._v("关于 JS 中采用双精度浮点数表示 Number 类型值，更多关于 "),n("router-link",{attrs:{to:"/FE-Language/ES/type-2-number.html"}},[t._v("js中双精度浮点数")])],1)]),t._v(" "),n("h3",{attrs:{id:"_10-nan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-nan","aria-hidden":"true"}},[t._v("#")]),t._v(" 10. NaN")]),t._v(" "),n("p",[t._v("同样，"),n("code",[t._v("NaN")]),t._v("是 IEEE 754 标准中定义的一个特殊的数量值，它表示不是一个数字，在 JS 中仍属于数值类型。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("NaN 的主要问题是：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("typeof NaN")]),t._v("不能准确辨别是一个纯数字，还是 NaN 或者 InFinity。")]),t._v(" "),n("li",[n("code",[t._v("NaN")]),t._v("总是不等于自身，即"),n("code",[t._v("NaN === NaN")]),t._v(" 返回 false")])]),t._v(" "),n("p",[t._v("所以要检测一个值是不是 NaN ，JS专门提供了一个全局方法 "),n("code",[t._v("isNaN()")]),t._v("，该方法会先将参数隐性转换为数值类型后再判断。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ab'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1ab'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 类似于 isNaN(Nuber('1ab'))")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),n("p",[t._v("判断一个值是否可用做数值，最好采用全局提供的 "),n("code",[t._v("isFinite()")]),t._v("方法，它仍然先会将参数隐性转换为数值类型，再排除 "),n("code",[t._v("NaN / InFinite")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1ab'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),n("p",[n("code",[t._v("isFinite()")]),t._v("会将参数做隐性转换，如果要判断一个值是不是一个纯数字的数值类型，可以自定义 "),n("code",[t._v("isNumber")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNumber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFinite")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_11-伪数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-伪数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 11. 伪数组")]),t._v(" "),n("p",[t._v("这部分主要在于两个问题：")]),t._v(" "),n("ul",[n("li",[t._v("不方便判断一个值是不是一个数组，使用传统方法较为麻烦。但现代 ES 语法中也提供了一个 "),n("code",[t._v("Array.isArray()")]),t._v("的静态方法。")]),t._v(" "),n("li",[t._v("类似 "),n("code",[t._v("arguments / NodeList")]),t._v("这些对象并不是真正的数组对象，只是拥有一个 length 属性而已。此类对象不能直接调用数组方法，但可以借用或将其转化为数组才可使用。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传统方法通过构造函数属性判断")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr 是一个数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Array]'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr 是一个数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES6 新方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr 是一个数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类数组数组对象借用数组方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LikeArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复用类数组生成数组对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LikeArray"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_12-假值-falsy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-假值-falsy","aria-hidden":"true"}},[t._v("#")]),t._v(" 12. 假值 falsy")]),t._v(" "),n("p",[t._v("文中的观点在于 "),n("code",[t._v("undefined / NaN")]),t._v("这两个值的使用上与 "),n("code",[t._v("null")]),t._v(" 完全不一样。 "),n("code",[t._v("null")]),t._v("作为关键字，不能使用并赋值，会报错。但"),n("code",[t._v("undefined / NaN")]),t._v("却不是关键字，可以在程序中可以重新定义并改变它们的值。")]),t._v(" "),n("p",[t._v("这种情况在 ES5 的规范中已经改善了这种情况，至少在全局作用域中这类值已经无法变更其值了，但在函数作用域中仍然可以。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局作用域")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数作用域中可以变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错 Uncaught SyntaxError: Unexpected token 'null'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在此处就会报错")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_13-hasownproperty"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-hasownproperty","aria-hidden":"true"}},[t._v("#")]),t._v(" 13. hasOwnProperty")]),t._v(" "),n("p",[n("code",[t._v("hasOwnProperty")]),t._v("方法常用于过滤 "),n("code",[t._v("for in")]),t._v("语句中对继承来的属性。但遗憾的是，"),n("code",[t._v("hasOwnProperty")]),t._v("作为一个方法，而不是一个运算符，所以在任何对象中，它可能会被重写或被同名变量覆盖掉。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasOwnProperty "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆写了")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被覆写了，报错， hasOwnProperty不是一个函数")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_14-object-原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-object-原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 14. Object 原型链")]),t._v(" "),n("p",[t._v("JS 中引用对象属性时，当自身不存在时，会沿着原型链去查找，直到无法找到，返回 undefined。如果找到就返回其值。")]),t._v(" "),n("p",[t._v("文中作者举例说明当对象引用自身属性与原型链上属性冲突时，会产生很多意外的结果。")]),t._v(" "),n("h2",{attrs:{id:"糟粕"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#糟粕","aria-hidden":"true"}},[t._v("#")]),t._v(" 糟粕")]),t._v(" "),n("h3",{attrs:{id:"_1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. "),n("code",[t._v("== / !==")])]),t._v(" "),n("p",[t._v("作者建议永远不要使用宽松相等和宽松不相等运算符 "),n("code",[t._v("== / !==")]),t._v("，而应该使用严格相等和严格不相等运算符"),n("code",[t._v("=== / !==")]),t._v("。")]),t._v(" "),n("ul",[n("li",[t._v("只有值两个运算数：1. 数据类型一致；2. 并且值完全相等，那么严格运算符"),n("code",[t._v("===")]),t._v("返回"),n("code",[t._v("true")]),t._v("，严格不相等返回"),n("code",[t._v("false")])]),t._v(" "),n("li",[t._v("而宽松运算符当运算数的数据类型不一致时，会尝试先强制转换值的类型，才比较。强制转换的规则复杂且难以记忆，也是BUG易出的隐患，违反了运算符的传递性。")])]),t._v(" "),n("blockquote",[n("p",[t._v("传递性是一种编程约定，可以理解为：如果 x===y,y===z,那么x===z")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 比如在VUE的表单绑定中单选radio组件，v-model的绑定数值常常是字符串形式\n * \n * <el-radio v-model=\"formParams.isRun\"><el-radio>\n * \n * 此时在script结构中的语句中判断最好显式使用Number函数进行转换再比较，代码意思更直观\n * \n * '1' == 1 // true\n * Number('1') === 1 // true\n */")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("formParams"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isRun"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 另一种情况，如果返回的对应绑定的值又是数值，如果需要v-model绑定回显，又常常要接口请求中转换由 String(1) 转换为字符 ‘1’\n */")]),t._v("\n\nformParams "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  isRun"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isRun"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. "),n("code",[t._v("++ / --")])]),t._v(" "),n("p",[t._v("这两个运算符可以用在运算数前面，也可以用在运算后面，语句运算的结果并不相同。这样这鼓励了一种不够谨慎的编程风格，使得代码变得隐晦，大多数的缓冲区溢出错误造成的安全错误，都是由这类不够谨慎的编码导致的。这像上面宽松和严格运算符一样，尽量让代码运算的逻辑更直观和整洁。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后自增形式，先执行赋值语句，再自增，即 b = a; a = a + 1")]),t._v("\nb "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2, 1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前自增形式，先执行加 1， 再赋值，邓 b = b + 1; c = b")]),t._v("\nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("b\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2, 2")]),t._v("\n")])])]),n("h3",{attrs:{id:"_3-new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-new","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. new")]),t._v(" "),n("p",[t._v("事实上任何函数都可以1. 直接调用；2. new 调用。如果是一个本意用于构造对象的函数当作普通函数调用，那函数体内的"),n("code",[t._v("this")]),t._v("会被绑定到全局对象，初始会的成员属性会污染全局变量的属性。")]),t._v(" "),n("p",[t._v("一般都是按照约定，但没有限制，命名创建对象的构造函数首字母以大写字母的形式来命名。")]),t._v(" "),n("p",[t._v("如果一个构造函数必须命名用"),n("code",[t._v("new")]),t._v("调用，可以使用"),n("code",[t._v("new.target")]),t._v("来判断：")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN new.target"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * new.target属性适用于所有函数中访问的元属性\n * 1. new.target返回一个指向构造方法或函数的引用。\n * 2. 在普通的函数调用中，new.target 的值是undefined。\n * 3. 在 箭头函数（arrow functions）中，new.target 指向最近的外层函数的new.target\n * \n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("param")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CreateObject() must be called with new"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" param\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CreateObject() must be called with new")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreateObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value")]),t._v("\n")])])]),n("p",[t._v("所以作者建议更好的策略是根本不去使用 new 。当然在现代ES6中，构造对象更建议使用"),n("code",[t._v("class")]),t._v("语法构建。")]),t._v(" "),n("p",[t._v("并且当初 JS 创建 "),n("code",[t._v("new + Function")]),t._v("的语法构造对象，也只是迫于当时公司的政法环境，用于模拟 JAVA 语法设施（见 JAVASCRIPT 语言的发展史）")]),t._v(" "),n("h3",{attrs:{id:"_4-void"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-void","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. void")]),t._v(" "),n("p",[t._v("在其它语言中，void 是一种类型，表示没有值。但在 JS 中，void 是一个运算符，它接受任何表达式，但返回结果永远是 "),n("code",[t._v("undefined")]),t._v("。这非常困惑，应该避免使用它。")]),t._v(" "),n("p",[t._v("一般在 HTML 的 a 链接元素中使用，避免点击跳转会使用下面的编码")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("javascript:void(0)"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("some thing"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("也可用于自执行函数（IIFE），因为 void 后面被视为表达式执行了，并且结果始终返回 undefined")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'run'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"_5-continue-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-continue-语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. continue 语句")]),t._v(" "),n("p",[t._v("作者的观点是 continue 语句性能不好。")]),t._v(" "),n("ul",[n("li",[t._v("continue 语句：结束本次循环，继续下一轮循环条件判断")]),t._v(" "),n("li",[t._v("break 语句：中止循环，如果是嵌套循环，中止本层循环，需要一层一层break退出全部循环")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * js中循环和迭代的语句\n * 1. for 语句\n * 2. for of\n * 3. for in  常与 object.hasOwnProperty()配合迭代对象的键\n * 4. while do-while\n */")]),t._v("\n\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n\n console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for break ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for continue ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 4 5")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for-of break ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for-of continue ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 4 5")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for-in break ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== for-in continue ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 2 4 5")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== while break ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5 4")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====== while continue ====='")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" k "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5 4 2 1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_6-switch-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-switch-语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. switch 语句")]),t._v(" "),n("p",[t._v("switch 语句的问题在于：除非每次在 case 语句明确中断流程（break / return / throw)，否则  case 条件穿越到下一个case条件，会导致很多隐藏的BUG，并且不容易发现，所以避免使用，或者每个 case 语句明确中断语句。")]),t._v(" "),n("h3",{attrs:{id:"_7-with-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-with-语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. with 语句")]),t._v(" "),n("p",[t._v("with 语句严重影响 JS 引擎的速度，并且代码难以理解，避免使用它")]),t._v(" "),n("h3",{attrs:{id:"_8-eval-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-eval-函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 8. eval 函数")]),t._v(" "),n("p",[t._v("eval 函数会将函数的字符串给 JS 编译器，并且执行其结果。 它的主要问题在于：")]),t._v(" "),n("ul",[n("li",[t._v("代码难以理解和阅读")]),t._v(" "),n("li",[t._v("JS 引擎性能降低，因为它需要运行编译器")]),t._v(" "),n("li",[t._v("不安全，因为会将传入的文本进行执行求值")]),t._v(" "),n("li",[t._v("像代码检测工具，如 JSLint ESLint 难以检测问题")])]),t._v(" "),n("p",[t._v("在实际代码中应尽量避免使用它。但常用于一些工具库的解析，如 webpack")]),t._v(" "),n("p",[t._v("另外，Function 构造器也是 eval 的一种形式，同样应该避免使用。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'let a = 1, b = 2; console.log(a + b);'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bad")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'return a + b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Good")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),n("h3",{attrs:{id:"_9-function-语句和-function-表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-function-语句和-function-表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. function 语句和 function 表达式")]),t._v(" "),n("p",[t._v("这两者主要问题在于 function 函数声明语句有两个问题：")]),t._v(" "),n("ul",[n("li",[t._v("存在函数声明提升的问题，导致函数可以先使用后声明。")]),t._v(" "),n("li",[t._v("禁止 if 条件语句中使用函数声明方式，因为虽然 JS 允许这样做，但不同的浏览器的 JS 引擎对这样写法在解析处理上各不相同，存在移植和兼容性问题")])]),t._v(" "),n("p",[t._v("所以作者建议使用函数表达式的形式定义函数。 但也有很多 JS 规范建议始终使用 函数声明的方式。在这点上，我更倾向于函数定义只用 function 声明，变量用 let , 常量用 const，这样界限清晰明确。")]),t._v(" "),n("h3",{attrs:{id:"_10-缺省块语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-缺省块语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 10. 缺省块语句")]),t._v(" "),n("p",[t._v("这点在现代 ES6 中已经不存在了。因为使用 let const 声明的变量即存在块级作用域的限定。")]),t._v(" "),n("h3",{attrs:{id:"_11-类型包装对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-类型包装对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 11. 类型包装对象")]),t._v(" "),n("p",[t._v("主要是指 JS 最初的三种基本类型存在对应的包装对象，所以对这三种类型的操作存在 “包装操作” 和 “拆包装操作”，并且涉及到 Object 对象的 "),n("code",[t._v("valueOf / toString / toPrimitive")]),t._v("的转换。存在不必要的复杂性")]),t._v(" "),n("blockquote",[n("p",[t._v("更多内容请点击查看 "),n("router-link",{attrs:{to:"/FE-Language/ES/type-8-primitive-wrapper.html#原始值-primitive"}},[t._v("原始值与包装对象")]),t._v(" 以及 "),n("router-link",{attrs:{to:"/FE-Language/ES/type-9-conversion.html"}},[t._v("类型转换")])],1)]),t._v(" "),n("h3",{attrs:{id:"_12-位运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-位运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 12. 位运算符")]),t._v(" "),n("p",[t._v("JS 有着一套与 JAVA 一样的位运算符")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("    and 按位与\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    or  按位或\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("    xor 按位异或\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("    not 按位非\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("   带符号的右移位\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v("  无符号的右移位\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("   左位移\n")])])]),n("p",[t._v("但在 JAVA 里，数值分多种类型，有整数和浮点数等，JAVA 里的位运算只处理整数类型。但 JS 中没有整数类型，数值在 JS 中都存储为双精度浮点数。")]),t._v(" "),n("p",[t._v("因此在 JS 中实现位运算，需要先将运算数先转换成整数，然后执行位运算符逻辑，最后再将结果转换成 JS 能表示的双精度浮点数。")]),t._v(" "),n("p",[t._v("在其它大多数语言中位运算符接近于硬件处理，所以非常块，但 JS 语言执行环境一般接触不到硬件层，所以非常慢。所以在 JS 中少用位运算。")]),t._v(" "),n("p",[t._v("另外， 位运算中的"),n("code",[t._v("&")]),t._v("，容易被误写成逻辑运算符"),n("code",[t._v("&&")]),t._v("（与），容易产生隐藏的 BUG")]),t._v(" "),n("h2",{attrs:{id:"精华"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#精华","aria-hidden":"true"}},[t._v("#")]),t._v(" 精华")]),t._v(" "),n("h3",{attrs:{id:"_1-函数是一等公民"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数是一等公民","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 函数是一等公民")]),t._v(" "),n("blockquote",[n("p",[t._v("更多内容请点击查看："),n("router-link",{attrs:{to:"/FE-Language/ES/fn-0-index.html"}},[t._v("函数")])],1)]),t._v(" "),n("h3",{attrs:{id:"_2-基于原型的动态对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于原型的动态对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 基于原型的动态对象")]),t._v(" "),n("blockquote",[n("p",[t._v("更多内容请点击查看："),n("router-link",{attrs:{to:"/FE-Language/ES/oop-0-index.html"}},[t._v("对象")])],1)]),t._v(" "),n("h3",{attrs:{id:"_3-字面量语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-字面量语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 字面量语法")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d+/g")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);