(window.webpackJsonp=window.webpackJsonp||[]).push([[290],{860:function(t,a,v){"use strict";v.r(a);var _=v(0),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"值和类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#值和类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 值和类型")]),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#数据：计算机中以二进制数表示"}},[t._v("数据：计算机中以二进制数表示")])]),v("li",[v("a",{attrs:{href:"#数据类型"}},[t._v("数据类型")])]),v("li",[v("a",{attrs:{href:"#类型标识"}},[t._v("类型标识")])]),v("li",[v("a",{attrs:{href:"#基本类型和引用类型的区别"}},[t._v("基本类型和引用类型的区别")])]),v("li",[v("a",{attrs:{href:"#静态类型和动态类型区别"}},[t._v("静态类型和动态类型区别")])]),v("li",[v("a",{attrs:{href:"#强类型和弱类型区别"}},[t._v("强类型和弱类型区别")])]),v("li",[v("a",{attrs:{href:"#规范类型"}},[t._v("规范类型")])]),v("li",[v("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),v("p"),t._v(" "),v("p",[t._v("回顾下程序的概念：程序是由数据和指令组成的。")]),t._v(" "),v("p",[t._v("所以在进一步讲解JS语法之前，我们先要明白数据是如何在计算机存储并参与计算的。")]),t._v(" "),v("h2",{attrs:{id:"数据：计算机中以二进制数表示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据：计算机中以二进制数表示","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据：计算机中以二进制数表示")]),t._v(" "),v("blockquote",[v("p",[t._v("下面内容引用自《程序是如何运行的》")])]),t._v(" "),v("p",[t._v("计算机的核心是由IC（ Integrated Circuit 集成电路）电子部件组成的。而IC电路的所有引脚的直流电压只有0V和5V两种高低电压状态。也就是说IC中的一个引脚只能表示两个状态。IC的这个特性刚好和二进制的计数方式相吻合，所以计算机的信息数据只能用二进制计数规则来处理。")]),t._v(" "),v("blockquote",[v("p",[t._v("当然二进制的计数方式并不是专门为计算机的IC电路设计的。二进制运算法则的提出者是德国数学家莱布尼兹，"),v("a",{attrs:{href:"https://zhidao.baidu.com/question/1177745006240062179.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("二进制运算法则的历史起源"),v("OutboundLink")],1)])]),t._v(" "),v("p",[t._v("计算机在处理二进数的几种单位：")]),t._v(" "),v("ul",[v("li",[t._v("位（bit），也就是 Binary digit的缩写，表示二进数中的一位，是计算机中数据的最小单位。")]),t._v(" "),v("li",[t._v("字节（Byte），8位二进数被称为一个字节，是最小计量单位。")])]),t._v(" "),v("p",[t._v("早期计算机中的IC电路设计中使用8个引脚的微处理器来处理数据，也就是8位CPU一次性可以处理8位二进制数，所以字节是计算机的基本处理单位，同时也是计算机的基本计量单位，内存和磁盘都使用字节来表示存储数据的容量和读写数据的速度。"),v("code",[t._v("1GB = 1024MB = 1024*1024B = 1024*1024*8bit")]),t._v("。")]),t._v(" "),v("p",[t._v("随着现代计算机硬件的发展，计算机微处理器从8位、32位，到现在普遍的64位，具有64个引脚的IC用于信息的输入和输出，也就是说现代计算机CPU一次可以处理64位（8个字节）的二进制序列。")]),t._v(" "),v("p",[t._v("计算机内部只用二进制数来表示信息，但计算机不会区分这个二进制序列是数值还是文字又或是某种图片数据。某个二进制序列到底代表什么只能由编写的程序来控制，所以在程序中需要定义数据的类型。")]),t._v(" "),v("p",[t._v("比如二制数"),v("code",[t._v("01000001")]),t._v("，可以视为纯粹的数值（十进制数65）进行算术运算如加减乘除，也可以视为是字母"),v("code",[t._v("A")]),t._v("显示（ASCII编码65），实际到底是以数值进行计算还是以文本进行显示，就需要依据程序定义这个数据时指定的类型来处理。")]),t._v(" "),v("h2",{attrs:{id:"数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),v("p",[t._v("数据类型是程序预设的一组定义数据存储方式和存储空间的规则。")]),t._v(" "),v("p",[t._v("定义了数据类型，这样储存数据时需要向系统申请的内存空间的大小就可以确定了，并且也确定了该类型数据系统运算的逻辑规则。\n比如number数值类型的数据需要在栈内存中开放64位（8个字节）空间来存放数据的二进制序列,并且以双精度浮点数的规则表示数值大小。")]),t._v(" "),v("p",[t._v("根据语言设定的数据类型规则，数据存储的内存空间由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，更加容易管理内存空间。\n比如基本类型（原始类型）数据存储在栈空间中，引用类型（对象类型）数据存储在堆空间中并把堆空间的引用地址指针存储在栈空间中。")]),t._v(" "),v("p",[t._v("最新的EcmaScript规范定义了8种数据类型，分为两大类：基本类型和引用类型")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("7种基本类型（也称原始类型）")]),t._v(" "),v("ol",[v("li",[t._v("Null类型： 值为：null")]),t._v(" "),v("li",[t._v("Undefined类型： 值为undefined")]),t._v(" "),v("li",[t._v("Boolean 布尔值：只有true / false")]),t._v(" "),v("li",[t._v("Number 数值：123（十进制） 056（八进制） 0xff（十六进制） 0b0011（二进制）")]),t._v(" "),v("li",[t._v("String 字符串: 'abc' '123'")]),t._v(" "),v("li",[t._v("Symbol类型：是唯一且不可改变的一个值。(ES2015新增)")]),t._v(" "),v("li",[t._v("BigInt大整数：可以安全地存储和操作任意精度的大整数，解决了Number类型数值有安全整数范围的限制。（ES2019新增）")])])]),t._v(" "),v("li",[v("strong",[t._v("1种引用类型值（也统称为对象类型Object）")]),t._v(" "),v("ul",[v("li",[t._v("在语言实现中，根据对象功能的不同也有不同的分类，如基本的Ojbect对象，以及Function函数对象、Array数组对象、RegExp正则对象、Error错误对象，以及ES6新增的Promise对象、Set对象、Map对象等等。")])])])]),t._v(" "),v("h2",{attrs:{id:"类型标识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型标识","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型标识")]),t._v(" "),v("p",[t._v("数据类型也是一种数据信息，叫做类型标识，也需要在计算机进行存储。")]),t._v(" "),v("p",[t._v("在第一代Javacript引擎中值表示为32位的二进制序列，同时把最低的3位作为类型标识，此时值的类型只包括对象、整数、浮点数和布尔值。")]),t._v(" "),v("blockquote",[v("p",[t._v("上述引自《深入理解Javascript》P94。最新的类型bigInt/Symbol是否仍遵循此规则，暂未查阅到相关资料")])]),t._v(" "),v("ul",[v("li",[t._v("000 - 对象，数据是对象类型")]),t._v(" "),v("li",[t._v("001 - 整型，数据是31位带符号整数（语言内部使用，比如数组索引值、位操作符时）")]),t._v(" "),v("li",[t._v("010 - 双精度类型，数据是双精度数字")]),t._v(" "),v("li",[t._v("100 - 字符串，数据是字符串")]),t._v(" "),v("li",[t._v("110 - 布尔类型，数据是布尔值")])]),t._v(" "),v("p",[t._v("而null和undefined的值有点特殊：")]),t._v(" "),v("ul",[v("li",[t._v("js最初为了实现null值，直接采用了机器语言的NULL指针，该值所有位都是0，所以"),v("code",[t._v("typeof null === 'object'")]),t._v("  --《深入理解Javascript》P94")]),t._v(" "),v("li",[t._v("undefined值在计算机内存中表示的是一个特殊的二进制序列，十进制表示为 −2^30 整数。")])]),t._v(" "),v("blockquote",[v("p",[t._v("参考资料：《深入理解Javascript》P94 和  https://segmentfault.com/a/1190000011830411")])]),t._v(" "),v("blockquote",[v("p",[t._v("JavaScript 之父本人也在多个场合表示过，typeof 的设计是有缺陷的，只是现在已经错过了修正它的时机，因为修正会破坏现有的代码。--极客时间《重学前端》第1讲")])]),t._v(" "),v("h2",{attrs:{id:"基本类型和引用类型的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和引用类型的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型和引用类型的区别")]),t._v(" "),v("p",[t._v("基本类型又称原始值类型，引用类型又称复杂类型或对象类型。")]),t._v(" "),v("p",[t._v("主要区别为以下几点：")]),t._v(" "),v("ol",[v("li",[t._v("内存的分配不同")])]),t._v(" "),v("ul",[v("li",[t._v("基本类型： 数据存放在栈内存中，它们是按值存放的")]),t._v(" "),v("li",[t._v("引用类型： 数据存放在堆内存当中，然后将堆内存地址存入在栈内存中，即它们是按引用地址存放的")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("访问机制不同")])]),t._v(" "),v("ul",[v("li",[t._v("基本类型：数据是按值访问")]),t._v(" "),v("li",[t._v("引用类型：数据是按引用地址访问。在访问一个对象时，需要先从栈中获得对象的地址指针，然后通过地址指针找到堆中的所需要的数据。")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("操作机制不同")])]),t._v(" "),v("ul",[v("li",[t._v("基本数据类型：在赋值或参数传递时，是原始值的拷贝。比如"),v("code",[t._v("a=b")]),t._v("是将b中保存的原始值的副本赋值给新变量a，a和b完全独立，互不影响。")]),t._v(" "),v("li",[t._v("引用数据类型：在赋值或参数传递时，是堆内存地址的复制，指向的堆内存中的同一份数据。比如"),v("code",[t._v("a=b")]),t._v("将b保存的对象内存的引用地址赋值给了新变量a; 此时a和b指向了同一个堆内存地址，其中一个值发生了改变，另一个也会改变。")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基本类型")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a1\nconsole"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 10")]),t._v("\nb1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nconsole"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 20")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用类型")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a2 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  age"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b2 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a2"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb2"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a2"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),v("h2",{attrs:{id:"静态类型和动态类型区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态类型和动态类型区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态类型和动态类型区别")]),t._v(" "),v("p",[t._v("在编程语言的语义中，静态一般是指“编译时”，动态指的是“运行时”。")]),t._v(" "),v("p",[v("strong",[t._v("静态类型：")]),t._v(" 是指变量在代码编译时就能确定数据类型，如C或类C的高级语言中，变量在声明时就指定了数据类型，之后数据类型不可变，会在编译期间对数据类型进行检查。")]),t._v(" "),v("p",[v("strong",[t._v("动态类型：")]),t._v(" 是指变量的数据类型是在代码执行到那一刻确定的。并且在代码执行期间同一变量可以被赋予不同的类型的数据。")]),t._v(" "),v("h2",{attrs:{id:"强类型和弱类型区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强类型和弱类型区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 强类型和弱类型区别")]),t._v(" "),v("p",[t._v("强类型语言和弱类型语言主要指是否允许不相同的数据类型进行运算。")]),t._v(" "),v("p",[v("strong",[t._v("强类型语言：")]),t._v(" 不同类型的数据是不可以进行运算的，由错误类型值构成的表达会导致错误，如"),v("code",[t._v("7*false")]),t._v("会报错。C或类C的高级语言属强类型语言。")]),t._v(" "),v("p",[v("strong",[t._v("弱类型语言：")]),t._v(" 两种不同类型的数据在运算时，JS会在底层调用类型转换方法进行类型的隐式转换，来使得两个数据可以进行运算。")]),t._v(" "),v("h2",{attrs:{id:"规范类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#规范类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 规范类型")]),t._v(" "),v("p",[t._v("上面总结的ES数据类型（基本类型和引用类型）主要是ES运行时类型。运行时类型是指代码实际执行过程中产生的数据类型，从变量、参数、返回值到表达式的计算结果都会是上述类型之一。")]),t._v(" "),v("p",[t._v("有一种说法：“程序 = 算法 + 数据结构”，运行时类型则包含所有JS执行时所需要的数据结构定义。所以说数据类型是程序预设的一组定义数据存储方式和存储空间的规则。")]),t._v(" "),v("p",[t._v("如果站在一个更高的角度上看，ES规范除了面向程序开发者定义了运行时类型，还有一种使用人群是ES规范的语言实现者，比如根据ES规范实现的Javascript语言、JSscript语言等。在这类语言实现者的角度，ES语言规范还定义了一些语言实现的规范类型：")]),t._v(" "),v("ul",[v("li",[t._v("List 和 Reecord：用于描述函数值参过程")]),t._v(" "),v("li",[t._v("Set：主要用于解释字符集等")]),t._v(" "),v("li",[t._v("Completion Record：用于描述语句执行过程，包括"),v("code",[t._v("[[type]]")]),t._v("、"),v("code",[t._v("[[value]]")]),t._v("、`[[target]]``属性")]),t._v(" "),v("li",[t._v("Reference：用于描述对象属性访问、delete等，包括一个对象和一个属性值。")]),t._v(" "),v("li",[t._v("Property Descriptor：用于描述对象的对象")]),t._v(" "),v("li",[t._v("Lexical Environment 和 Enviornment Record：用于描述变量和作用域")]),t._v(" "),v("li",[t._v("Data Block：用于描述二进制数据。")])]),t._v(" "),v("blockquote",[v("p",[t._v("规范类型内容引入极客时间《重学前端》类型章节")])]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("ol",[v("li",[t._v("计算机数据是以二进制序列存储的。")]),t._v(" "),v("li",[t._v("ES中数据类型分为7种原始值类型和对象类型，类型之间可以进行类型转换。")]),t._v(" "),v("li",[t._v("静态语言和动态语言的区分主要是编译时确定类型还是运行时确定类型。")]),t._v(" "),v("li",[t._v("强类型语言和弱类型语言指是否允许不兼容的类型进行运算。")]),t._v(" "),v("li",[t._v("JavaScript是一门动态的弱类型语言，指的就是数据类型是在运行时根据赋值动态确定的，并且两种不同类型的数据在运算时JS语言会在底层调用对应类型的转换方法进行数据类型的隐式转换。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);