(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{857:function(n,t,s){"use strict";s.r(t);var a=s(0),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"null-undefined-boolean-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-undefined-boolean-类型","aria-hidden":"true"}},[n._v("#")]),n._v(" Null / Undefined / Boolean 类型")]),n._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#null-和-undefined-的历史"}},[n._v("null 和 undefined 的历史")])]),s("li",[s("a",{attrs:{href:"#null-和-undefined-常见的场景"}},[n._v("null 和 undefined 常见的场景")])]),s("li",[s("a",{attrs:{href:"#null-和-undefined-检测"}},[n._v("null 和 undefined 检测")])]),s("li",[s("a",{attrs:{href:"#unll-和-undefined-不同点"}},[n._v("unll 和 undefined 不同点")])]),s("li",[s("a",{attrs:{href:"#boolean-布尔值"}},[n._v("Boolean 布尔值")])])])]),s("p"),n._v(" "),s("p",[n._v("ES语言规范中定义了两个表示“无”的值：undefined 和 null，这是为什么呢？")]),n._v(" "),s("h2",{attrs:{id:"null-和-undefined-的历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的历史","aria-hidden":"true"}},[n._v("#")]),n._v(" null 和 undefined 的历史")]),n._v(" "),s("blockquote",[s("p",[n._v("引自《深入理解JavaScript》P72-75")])]),n._v(" "),s("p",[n._v("在Brendan Eich创建JS语言时，受限于当时网景和SUN公司的合作及网景公司领导层要求这门新语言要尽量类似于JAVA语言。所以JS中采用了JAVA语言中将变量分为原始值和对象的处理方式，同时也使用了JAVA中表示非对象的null值。但在实现时遵循了C语言的先例，直接采用了机器语言的NULL指针，该null值所表示的二进制序列都是0。所以导致了两个结果：")]),n._v(" "),s("ul",[s("li",[n._v("typeof null === 'object'，参见"),s("a",{attrs:{href:"/ES/type-7-checking"}},[n._v("类型检测")])]),n._v(" "),s("li",[n._v("Nubmer(null) === 0，即null值在强制转为数字时会变成0。")])]),n._v(" "),s("p",[n._v("在JS第一个版本中是没有异常处理机制的，所以在遇到未初始化的变量，或者缺失参数导致的异常时都需要一个值来表示。本来是可以直接用已实现的null值来表示。但Brendan Eich却觉得这种情况下用null值来表示并不合适，主要有两点原因：")]),n._v(" "),s("ol",[s("li",[n._v("null值在JAVA中被当成一个对象，但Eich认为在未初始化的变量或者缺少参数的异常场景中，表示“无”的这个值不应该具有指向性，因为这种场景下不仅仅是一个对象，也可能是其它类型的值。所以用一个在JAVA中被当作对象的null值来表示并不合适。")]),n._v(" "),s("li",[n._v("另外，这个场景下如果用null值来表示，在数据隐式转换时会被当做0看待，这会导致有很多异常情况被隐藏，不容易发现错误。")])]),n._v(" "),s("p",[n._v("所以，Eich 又设计了undefined值，作为适合上述场景使用的表示“无”的原始值，它在强制转换为数值时为NaN。")]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 0")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),n._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// true")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// NaN")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// NaN")]),n._v("\n")])])]),s("p",[n._v("虽然null和undefined都是表示“无”，都是原始类型，但日常使用上还是有一些细微的差别。我们可以这么理解它们：")]),n._v(" "),s("ul",[s("li",[n._v("undefined 虽然单词语义表示未定义，但实现场景上理解为：变量已经声明了但没有被初始化赋值")]),n._v(" "),s("li",[n._v("null 表示无，理解为变量声明并明确表示无，即赋值为null。")])]),n._v(" "),s("h2",{attrs:{id:"null-和-undefined-常见的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-常见的场景","aria-hidden":"true"}},[n._v("#")]),n._v(" null 和 undefined 常见的场景")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("null 场景：")]),n._v(" "),s("ul",[s("li",[n._v("是原始链最未端的一个元素，表示已经没有对象了。"),s("code",[n._v("Object.getPrototypeOf(Object.prototype) // null")])]),n._v(" "),s("li",[n._v("或者主动设置某个变量为null，表示不需要了，便于系统垃圾回收。 "),s("code",[n._v("obj = null")])])])]),n._v(" "),s("li",[s("p",[n._v("undefined 被创建出来就是为了应付以下场景的：")]),n._v(" "),s("ul",[s("li",[n._v("变量声明后未被赋值")]),n._v(" "),s("li",[n._v("函数调用缺失的参数")]),n._v(" "),s("li",[n._v("函数未显性指明return的返回值")]),n._v(" "),s("li",[n._v("访问对象不存在的属性")])]),n._v(" "),s("h2",{attrs:{id:"null-和-undefined-检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-检测","aria-hidden":"true"}},[n._v("#")]),n._v(" null 和 undefined 检测")]),n._v(" "),s("p",[n._v("对null 和 undefined的检测通常使用严格相等来判断")]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[n._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("||")]),n._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v("\n")])])]),s("p",[n._v("或者利用null/undefined都是假值falsy的特性，直接用于判断语句")]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[n._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),n._v(" someByTrue "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" someByFalse\n")])])]),s("h2",{attrs:{id:"unll-和-undefined-不同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unll-和-undefined-不同点","aria-hidden":"true"}},[n._v("#")]),n._v(" unll 和 undefined 不同点")]),n._v(" "),s("ul",[s("li",[n._v("null在ES中是一个关键字，在代码中可以直接使用值null")]),n._v(" "),s("li",[n._v("undefined 却是全局对象的一个属性。在ES5以前，undefined作为全局对象属性可以被重新赋值。但在ES5之后，作为全局对象的undefined属性已经变为只读了。但因为undefined不是一个关键字，所以仍然可以函数作用域内作为变量名被重新赋值。")])]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[n._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// undefined")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'123'")]),n._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// undefined")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("var")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'123'")]),n._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 123")]),n._v("\n")])])]),s("p",[n._v("所以在实际代码中并不会主动把变量命名成undefined 或者赋值为undefined。如果真要赋值一个变量为空值会使用null。")]),n._v(" "),s("p",[n._v("鉴于undefined不是关键字，可以用途变量名被重新赋值会导致的不确定性，实际中常使用 "),s("code",[n._v("void")]),n._v("运算符替代undefined，因为"),s("code",[n._v("void")]),n._v("运算符执行右侧表达值后始终返回undefined。")]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 在一个函数作用域内，如果要检测undefined值")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 因为undefined不是关键字，在函数作用域内可以作为变量名重新被赋值，所以此时if语句的表达式判断并不可靠")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("true")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 此时我们可以利用void运算总是返回undefined来改写上面if条件，使判断完全可靠")]),n._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])])])]),n._v(" "),s("h2",{attrs:{id:"boolean-布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean-布尔值","aria-hidden":"true"}},[n._v("#")]),n._v(" Boolean 布尔值")]),n._v(" "),s("blockquote",[s("p",[n._v("以19世纪英国数学家乔治布尔（George Boole）命名。在1847年出版了《逻辑的数学分析》，由于其在符号逻辑运算中的特殊贡献，很多计算机语言中将逻辑运算称为布尔运算，将其结果称为布尔值。")])]),n._v(" "),s("p",[n._v("布尔值在JS中也叫真假值，它的值只有true 或 false 。")]),n._v(" "),s("p",[n._v("判断为假值(falsy)主要为以下几个值:")]),n._v(" "),s("ul",[s("li",[n._v("null")]),n._v(" "),s("li",[n._v("undefined")]),n._v(" "),s("li",[n._v("false")]),n._v(" "),s("li",[n._v("0  NaN")]),n._v(" "),s("li",[n._v("''")])]),n._v(" "),s("p",[n._v("除此之外的值判断为真值(truthy)。")]),n._v(" "),s("p",[n._v("对象也都是真值，即使空数组或空对象。")]),n._v(" "),s("p",[n._v("特别注意的是使用Boolean构造函数生成一个假值的包装对象，在if判断中也是真值，因为它是一个对象。")]),n._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// true")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// true")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" myFalse_1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// myFalse_1是一个真值")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" myFalse_2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// myFalse_2是一个假值")]),n._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/2f663dc820d0",target:"_blank",rel:"noopener noreferrer"}},[n._v("关于boolean类型在内存中的二进制序列表示的讨论"),s("OutboundLink")],1),n._v(" "),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/115392447",target:"_blank",rel:"noopener noreferrer"}},[n._v("Boolean 在V8源码中的实现"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);