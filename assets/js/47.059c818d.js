(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{223:function(t,s,a){t.exports=a.p+"assets/img/js_08.e26215c0.jpg"},619:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"《javascript-面向对象编程》"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#《javascript-面向对象编程》","aria-hidden":"true"}},[t._v("#")]),t._v(" 《JavaScript 面向对象编程》")]),t._v(" "),n("p",[n("img",{attrs:{src:a(223),alt:"js_08.jpg"}}),t._v("\n2013年3月第1版")]),t._v(" "),n("p",[t._v("这本书的重点章节集中在 JS 核心的概念上：")]),t._v(" "),n("ul",[n("li",[t._v("函数：函数、作用域、闭包")]),t._v(" "),n("li",[t._v("对象：对象、原型、继承")])]),t._v(" "),n("p",[t._v("另外还有一章对浏览器环境中的 BOM  DOM 讲解以值得看看。")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#p5：面向对象程序设计"}},[t._v("P5：面向对象程序设计")])]),n("li",[n("a",{attrs:{href:"#p14：变量初始化"}},[t._v("P14：变量初始化")]),n("ul",[n("li",[n("a",{attrs:{href:"#p21-指数表示法"}},[t._v("P21: 指数表示法")])]),n("li",[n("a",{attrs:{href:"#p56：-parseint-string-radix"}},[t._v("P56：parseInt(string, radix)")])])])]),n("li",[n("a",{attrs:{href:"#p57：-parsefloat-string"}},[t._v("P57：parseFloat(string)")])]),n("li",[n("a",{attrs:{href:"#p59-uri-url的编码和返编码"}},[t._v("P59: URI/URL的编码和返编码")])]),n("li",[n("a",{attrs:{href:"#p85-哈希表和索引数组"}},[t._v("P85: 哈希表和索引数组")])]),n("li",[n("a",{attrs:{href:"#p96-内置对象-built-in-object"}},[t._v("P96: 内置对象 built-in Object")])]),n("li",[n("a",{attrs:{href:"#p180：-继承的实现"}},[t._v("P180： 继承的实现")])]),n("li",[n("a",{attrs:{href:"#p248：编程模式与设计模式"}},[t._v("P248：编程模式与设计模式")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"p5：面向对象程序设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p5：面向对象程序设计","aria-hidden":"true"}},[t._v("#")]),t._v(" P5：面向对象程序设计")]),t._v(" "),n("p",[t._v("OOP 面向对象程序设计中的概念：")]),t._v(" "),n("ul",[n("li",[t._v("对象：属性和方法")]),t._v(" "),n("li",[t._v("类")]),t._v(" "),n("li",[t._v("封装")]),t._v(" "),n("li",[t._v("聚合")]),t._v(" "),n("li",[t._v("多态")]),t._v(" "),n("li",[t._v("继承")])]),t._v(" "),n("p",[t._v("对象：通过 《JavaScript 专家编程》一书我们了解到，在编程范畴内，对象是对现实中事物的一种隐喻表达，也就是本文中所说的，所谓对象，实质上是指现实事物在程序设计语言中的表现形式。而这里的“事物”可以是任何客观存在的对象，也可以是某些较为抽象的概念。所以对象的命名通常是名词形式，代表某类事物。")]),t._v(" "),n("p",[t._v("类：是对同一类对象中抽象出来共同的部分组成的对象模板。在传统的面向对象语言 C++ / JAVA，对象都是基于类这种模板创建的。但是在 JS 中，压根儿没有这种类的概念，该语言的一节都是基于对象的，对象的创建是基于另一对象的，JS 所依靠的是一套基于原型的系统。（原型也是一个对象）。")]),t._v(" "),n("blockquote",[n("p",[t._v("所以我们要明白，面向对象编程的实现有两种方式：一种是基于类的面向对象实现，一种是基于原型的面向对象的实现。"),n("br"),t._v(" 这里说 JS 没有类的概念要与 ES6语法中  class 语法概念区分开。通过 JS 语言的演化历史，你就会发现，JS 这门语言始终在使用原型这套行系统去模拟实现 JAVA 的语言设施。")])]),t._v(" "),n("p",[t._v("封装：两层意思")]),t._v(" "),n("ul",[n("li",[t._v("将对象的特征和表现通过对象的属性和方法进行封装，组成一个对象实例。（把抽象出来的数据（属性）和对数据的操作（方法）封装成对象）")]),t._v(" "),n("li",[t._v("另一层封装的意思指信息的隐藏，即数据被保护在对象内部，数据访问只能通过被授权的特权方法来访问对象成员（对象属性）。也包括对象属性和方法的可见性。")])]),t._v(" "),n("p",[t._v("聚合：所谓聚合，也叫组合。实际上是指将几个现有对象合并成一个新对象的过程。强调将多个对象合而为一的能力。这个概念在 JS 实践较少，如果要达到组合多个对象属性和方法的效果，以前可以逐个对对象属性和方法进行遍历拷贝，但现代 ES6 中，可以使用 "),n("code",[t._v("Object.assign()")]),t._v("简单实现对象浅拷贝。")]),t._v(" "),n("p",[t._v("继承：继承的目的也是为了实现对现有代码的重用。在传统 OOP 中，继承都是指类与类之间的关系，但在JS中由于不存在类的概念，继承只发生在对象之间。\n多态：函数重载（基于 JS 无限制函数参数数量的实现，arguments和 ES6的rest参数）和方法覆写（基于 JS 在原型链查找最近的属性实现）。")]),t._v(" "),n("h2",{attrs:{id:"p14：变量初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p14：变量初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" P14：变量初始化")]),t._v(" "),n("p",[t._v("所谓变量初始化，实际上指的是变量首次被赋值的时机。可以有两种方法选择：")]),t._v(" "),n("ul",[n("li",[t._v("变量先声明，后赋值 "),n("code",[t._v("let i; i = 1;")])]),t._v(" "),n("li",[t._v("声明和赋值在一条语句中完成 "),n("code",[t._v("let i = 1;")])])]),t._v(" "),n("h3",{attrs:{id:"p21-指数表示法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p21-指数表示法","aria-hidden":"true"}},[t._v("#")]),t._v(" P21: 指数表示法")]),t._v(" "),n("p",[t._v("在 JS 中，数值类型可以用指数形式表示：1e1 或者 1e+1。在理解上可以这样认为：")]),t._v(" "),n("ul",[n("li",[t._v("2e+3: 在数字后面加3个0，即2000")]),t._v(" "),n("li",[t._v("2e+3: 将数字2的小数点右移3位，即2000; 2e-3: 将数字2的小数点左移3位，即0.002。")])]),t._v(" "),n("blockquote",[n("p",[t._v("假想在整数后跟一个小数。"),n("br"),t._v("在十进制中，e 代表指数根 10, e+3 理解为 10的3次方。 e-3 理解为 10的-3次方，即小数形式。")])]),t._v(" "),n("h3",{attrs:{id:"p56：parseint-string-radix"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p56：parseint-string-radix","aria-hidden":"true"}},[t._v("#")]),t._v(" P56："),n("code",[t._v("parseInt(string, radix)")])]),t._v(" "),n("p",[t._v("该内置的全局方法的作用是将数值字符串转为十进制数，以前对这个方法有两个认知误区：")]),t._v(" "),n("ol",[n("li",[t._v("以为第二参数radix是指想要的结果的进制，但事实上，第二个参数是用来表明当前第一个参数代表的进制，而不是该方法返回结果的进制，返回的结果只能是十进制数。")]),t._v(" "),n("li",[t._v("第二参数缺省时，以为默认是10进制数，但事实上，方法会根据第一个参数的表示形式自动判断。")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN parseInt"),n("OutboundLink")],1),t._v("如果 radix 是 undefined、0或未指定的，JavaScript会假定以下情况：")]),t._v(" "),n("ul",[n("li",[t._v('如果输入的 string以 "0x"或 "0x"（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被解析为十六进制数。')]),t._v(" "),n("li",[t._v('如果输入的 string以 "0"（0）开头， radix被假定为8（八进制）或10（十进制）。具体选择哪一个radix取决于宿主的实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。因此，在使用 parseInt 时，一定要指定一个 radix。')]),t._v(" "),n("li",[t._v("如果输入的 string 以任何其他值开头， radix 是 10 (十进制)。")]),t._v(" "),n("li",[t._v("如果第一个字符不能转换为数字，parseInt会返回 NaN。")])]),t._v(" "),n("blockquote",[n("p",[t._v("对于没有指定 radix 参数时的八进制解析，ECMAScript 5 规范不再允许parseInt函数的实现环境把以0字符开始的字符串作为八进制数值。但在以前 ECMAScript 3中，ECMAScript 3仅仅是不提倡这种做法但并没有禁止这种做法。所以直至2013年，很多实现环境并没有采取新的规范所规定的做法, 而且由于必须兼容旧版的浏览器，所以永远都要明确给出radix参数的值.")])]),t._v(" "),n("p",[t._v("如果要将某个数转换返回指定进制的数，可以使用方法："),n("code",[t._v("Number.prototype.toString(radix)")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xF"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'015'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'015'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15，现代浏览器大部分都遵循 ES5的实现，遇0按十进制转换，但也可以某个存在兼容性的浏览器按8进制转换，返回 13")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'015'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 13")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'08'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0, 因为 8 在进制数中不是有效数字")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// F 如果直接数值打点，解释器会将第数字紧跟的第一点认为是小数点，小数点后面接字符会报错。所以数字要直接调用方法，需要两个点")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// F, 用构造函数包装，隐式转成包装对象，打点调用方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nubmer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// F, 显式转换成包装对象打点调用")]),t._v("\n")])])]),n("h2",{attrs:{id:"p57：parsefloat-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p57：parsefloat-string","aria-hidden":"true"}},[t._v("#")]),t._v(" P57："),n("code",[t._v("parseFloat(string)")])]),t._v(" "),n("p",[t._v("不同于 parseInt， parseFloat只包含一个参数。将字符串解析为十进制的小数表示。")]),t._v(" "),n("p",[t._v("规则是：")]),t._v(" "),n("ul",[n("li",[t._v("如果 parseFloat 在解析过程中遇到了**正号（+）、负号（- U+002D HYPHEN-MINUS）、数字（0-9）、小数点（.）、或者科学记数法中的指数（e 或 E）**以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。")]),t._v(" "),n("li",[t._v("第二个小数点的出现也会使解析停止（在这之前的字符都会被解析）。")]),t._v(" "),n("li",[t._v("参数首位和末位的空白符会被忽略。")]),t._v(" "),n("li",[t._v("如果参数字符串的第一个字符不能被解析成为数字,则 parseFloat 返回 NaN。")]),t._v(" "),n("li",[t._v("parseFloat 也可以解析并返回 Infinity。")]),t._v(" "),n("li",[t._v("parseFloat解析 BigInt 为 Numbers, 丢失精度。因为末位 n 字符被丢弃。")]),t._v(" "),n("li",[t._v("parseFloat 也可以转换一个已经定义了 toString 或者 valueOf 方法的对象，它返回的值和在调用该方法的结果上调用 parseFloat 值相同。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下都返回 3.14")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.14'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.14.159'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  3.14  '")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'314e-2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0314E+2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.14some non-digit characters'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.14"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FF2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),n("h2",{attrs:{id:"p59-uri-url的编码和返编码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p59-uri-url的编码和返编码","aria-hidden":"true"}},[t._v("#")]),t._v(" P59: URI/URL的编码和返编码")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("encodeURI() / encodeURIComponent()")])]),t._v(" "),n("li",[n("code",[t._v("decodeURI() / decodeURIComponent()")])])]),t._v(" "),n("p",[t._v("在 URL (Uniform Resource Locator 统一资源定位符) 或 URI (Uniform Resource Identifier 统一资源标识符)中，有一些字符是具有特殊含义的，如果我们不转换原样进行传输的话，可能会与 JSON 格式中的特殊字符字符冲突，或者与其它网络协议中特殊字符冲突导致失败。此时我们就需要将包含特殊字符的 URL 进行转换包装一下再进行传输。")]),t._v(" "),n("p",[t._v("在全局对象中提供了转换包装的方法： encodeURI / encodeURIComponent")]),t._v(" "),n("p",[t._v("两者的不同在于：encodeURI能转换成一个可用的URL，相当于会智能识别正常URL部分的字符不进行转换。但 encodeURIComponent 则将要转换的入参都当作只是 URL 中需要转换的那一部分（component），将所有字符都进行了转换。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.baidu.com/scr ipt.php?q=this and that'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://www.baidu.com/scr%20ipt.php?q=this%20and%20that")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http%3A%2F%2Fwww.baidu.com%2Fscr%20ipt.php%3Fq%3Dthis%20and%20that   将正常的 http://www.baidu.com/ 中的特殊字符也转换了。")]),t._v("\n")])])]),n("p",[t._v("对应的也有两个反转义的函数 "),n("code",[t._v("decodeURI() / decodeURIComponent()")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" url "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.baidu.com/scr ipt.php?q=this and that'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://www.baidu.com/scr%20ipt.php?q=this%20and%20that")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http%3A%2F%2Fwww.baidu.com%2Fscr%20ipt.php%3Fq%3Dthis%20and%20that   将正常的 http://www.baidu.com/ 中的特殊字符也转换了。")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeURI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://www.baidu.com/scr ipt.php?q=this and that")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http://www.baidu.com/scr ipt.php?q=this and that")]),t._v("\n")])])]),n("h2",{attrs:{id:"p85-哈希表和索引数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p85-哈希表和索引数组","aria-hidden":"true"}},[t._v("#")]),t._v(" P85: 哈希表和索引数组")]),t._v(" "),n("p",[t._v("在一些程序设计语言中，通常都会存在着两种不同的数组形式：")]),t._v(" "),n("ul",[n("li",[t._v("一般性数组：也叫索引型数组，或叫枚举型数组（通常以数字为键值）")]),t._v(" "),n("li",[t._v("关联型数组：也叫哈希表，或叫散列表，是一种 key-value的数组结构（通常以字符串为键值）")])]),t._v(" "),n("p",[t._v("在 JS 中，我们会用 Array 数组来表示索引数组，而用 Object 对象来表示关联数组。所以在 JS 中要表示哈希表，就必须用到对象")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 索引型数组")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"p96-内置对象-built-in-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p96-内置对象-built-in-object","aria-hidden":"true"}},[t._v("#")]),t._v(" P96: 内置对象 built-in Object")]),t._v(" "),n("p",[t._v("内置对象大致分为三类：")]),t._v(" "),n("ul",[n("li",[t._v("数据封装类：即对应基本类型的构造器对象，包括 Object / Array / Function / Boolean / String / Number")]),t._v(" "),n("li",[t._v("工具类对象：Math / Date / RegExp")]),t._v(" "),n("li",[t._v("错误类对象：Error / TypeError / RangeError 等。")])]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://biz.51cto.com/art/202005/616337.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("漫话：为什么计算机起始时间是1970年1月1日0时0分0称？"),n("OutboundLink")],1),n("br"),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/72516872",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算机元年(纪年 Epoch Time)和UTC"),n("OutboundLink")],1),n("br"),n("a",{attrs:{href:"https://www.cnblogs.com/xwdreamer/p/8761825.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("UTC时间、GMT时间、本地时间、Unix时间戳"),n("OutboundLink")],1)])]),t._v(" "),n("blockquote",[n("p",[t._v("Unix时间戳是秒，而通过 JS 的 new Date().getTime() 获取的时间戳是 毫秒 单位。")])]),t._v(" "),n("h2",{attrs:{id:"p180：-继承的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p180：-继承的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" P180： 继承的实现")]),t._v(" "),n("p",[t._v("在 JS 中，继承的目的是实例代码复用，")]),t._v(" "),n("p",[t._v("继承的实现分为四种：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Object.create()")])]),t._v(" "),n("li",[t._v("构造器 "),n("code",[t._v("new + F")])]),t._v(" "),n("li",[t._v("ES6新语法 Class")]),t._v(" "),n("li",[t._v("对象的属性的拷贝（浅拷贝和深拷贝）")])]),t._v(" "),n("p",[t._v("具体看书中表中总结")]),t._v(" "),n("h2",{attrs:{id:"p248：编程模式与设计模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#p248：编程模式与设计模式","aria-hidden":"true"}},[t._v("#")]),t._v(" P248：编程模式与设计模式")]),t._v(" "),n("ol",[n("li",[t._v("什么是模式？")])]),t._v(" "),n("p",[t._v("模式，简单说，就是专门为某些常见问题总结出的优秀的解决方案。")]),t._v(" "),n("blockquote",[n("p",[t._v("当我们面对一个新的编程问题时，往往会立刻发现眼前的这个问题与我们之前解决过的某个问题有很多相似之处。这个时候，你或许就会考虑将这些问题总结、抽象、归类，以寻求一个通用性的解决方案。而所谓模式，实际上就是一系列经过实战证明的，针对某类问题，具有可重用性的解决方案。模式被当做一个术语来使用，并命名，以使交流变得更容易而已。")])]),t._v(" "),n("p",[t._v("本章讨论的模式分为两类：")]),t._v(" "),n("ul",[n("li",[t._v("编程模式： 一些专门为 JS 语言开发出的最佳实践方案")]),t._v(" "),n("li",[t._v("设计模式： 这些模式与具体语言实现无关，主要来自“GoF的《设计模式》”一书")])]),t._v(" "),n("blockquote",[n("p",[t._v("《设计模式：可利用的面向对象软件的基础》是软件工程领域有关软件设计的一本书，提出和总结了对一些常见软件设计问题的标准解决方案，称为软件设计模式。该书的作者有四个人，通常称为“四人帮”（Gang of Four, GoF)")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("编程模式")])]),t._v(" "),n("ul",[n("li",[t._v("行为隔离（关注点分离）")]),t._v(" "),n("li",[t._v("命名空间")]),t._v(" "),n("li",[t._v("初始化分支")]),t._v(" "),n("li",[t._v("延迟定义")]),t._v(" "),n("li",[t._v("配置对象")]),t._v(" "),n("li",[t._v("私有变量和方法")]),t._v(" "),n("li",[t._v("特权方法")]),t._v(" "),n("li",[t._v("私有函数的公有化")]),t._v(" "),n("li",[t._v("自执行函数")]),t._v(" "),n("li",[t._v("链式调用")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("设计模式")])]),t._v(" "),n("ul",[n("li",[t._v("创建型模式： 涉及对象的创建和初始化")]),t._v(" "),n("li",[t._v("结构型模式： 描述了如何组合对象以提供新的功能")]),t._v(" "),n("li",[t._v("行为型模式： 描述了对象之间的通信")])])])}),[],!1,null,null,null);s.default=r.exports}}]);