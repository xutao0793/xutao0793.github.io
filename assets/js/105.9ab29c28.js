(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{632:function(t,v,_){"use strict";_.r(v);var e=_(0),d=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"node-节点基类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-节点基类","aria-hidden":"true"}},[t._v("#")]),t._v(" Node 节点基类")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#属性和方法"}},[t._v("属性和方法")])]),_("li",[_("a",{attrs:{href:"#nodelist-类数组"}},[t._v("NodeList 类数组")])])])]),_("p"),t._v(" "),_("p",[t._v("DOM 1级在DOM Core中定义了一个Node接口（也就是Node的构造函数，或者说Node类），DOM树中的所有节点类型都从这个接口继承一组通用的属性和方法。")]),t._v(" "),_("blockquote",[_("p",[t._v("在Javscript语言实现的DOM接口中，Node对象是从Ojbect接口（Object是JS中的基类）继承来的，所有也拥有JS中对象的基本属性和方法。")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Node  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function'")]),t._v("\nNode "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nObject"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("isProtoTypeOf")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),_("h2",{attrs:{id:"属性和方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性和方法")]),t._v(" "),_("p",[t._v("DOM的目的就是为编程语言操作文档提供编程接口。而在脚本语言中对文档的操作无非就是增删改查（创建节点、添加节点、删除节点、替换或移动节点、选中节点等）。")]),t._v(" "),_("p",[t._v("现在我们来看下Node接口提供的通用的属性和方法，这些属性和方法都挂载在原型"),_("code",[t._v("Node.prototype")]),t._v("上。")]),t._v(" "),_("p",[t._v("从浏览器console面板上输入"),_("code",[t._v("Node.prototype")]),t._v("回车即可看到")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("属性")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("节点本身信息相关")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("nodeType")]),t._v(" "),_("td",[t._v("只读，返回数字代表节点类型，如元素节点 1，文本节点 3")])]),t._v(" "),_("tr",[_("td",[t._v("nodeName")]),t._v(" "),_("td",[t._v("只读，依节点类型返回，如果是元素节点则始终返回标签名（大写），文本节点为'#text'，文档节点为'#document'")])]),t._v(" "),_("tr",[_("td",[t._v("nodeValue")]),t._v(" "),_("td",[t._v("可读写，如果是元素节点则为null，如果文本节点则返回节点内容")])]),t._v(" "),_("tr",[_("td",[t._v("textContent")]),t._v(" "),_("td",[t._v("可读写，返回或设置一个元素内所有子结点及其后代的文本内容")])]),t._v(" "),_("tr",[_("td",[t._v("节点关系相关")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("ownerDocument")]),t._v(" "),_("td",[t._v("返回这个节点的根节点，即 Document对象")])]),t._v(" "),_("tr",[_("td",[t._v("parentNode")]),t._v(" "),_("td",[t._v("返回一个当前结点的父节点，如果没有或当前结点已经是根节点则为null")])]),t._v(" "),_("tr",[_("td",[t._v("parentElement")]),t._v(" "),_("td",[t._v("返回一个当前节点的父元素节点 。 如果当前节点没有父节点或者说父节点不是一个元素(Element), 这个属性返回null")])]),t._v(" "),_("tr",[_("td",[t._v("childNodes")]),t._v(" "),_("td",[t._v("返回一个包含了所有子节点的实时的NodeList类数组对象")])]),t._v(" "),_("tr",[_("td",[t._v("firstChild")]),t._v(" "),_("td",[t._v("返回该节点的第一个子节点，如果该节点没有子节点则返回null。")])]),t._v(" "),_("tr",[_("td",[t._v("lastChild")]),t._v(" "),_("td",[t._v("返回该节点的最后一个子节点，如果该节点没有子节点则返回null。")])]),t._v(" "),_("tr",[_("td",[t._v("previousSibling")]),t._v(" "),_("td",[t._v("返回一个当前节点同辈的前一个结点，如果没有返回null")])]),t._v(" "),_("tr",[_("td",[t._v("nextSibling")]),t._v(" "),_("td",[t._v("返回与该节点同级的下一个节点，如果没有返回null。")])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("查询节点相关方法")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("getRootNode()")]),t._v(" "),_("td",[t._v("返回上下文对象的根结点")])]),t._v(" "),_("tr",[_("td",[t._v("hasChildNodes()")]),t._v(" "),_("td",[t._v("布尔值，来表示该元素是否包含有子节点。")])]),t._v(" "),_("tr",[_("td",[t._v("isEqualNode()")]),t._v(" "),_("td",[t._v("布尔值，表示两个节点是否严格相等（有多个满足条件才完全相等，见下面)")])]),t._v(" "),_("tr",[_("td",[t._v("contains()")]),t._v(" "),_("td",[t._v("布尔值，表示传入的节点是否为该节点的后代节点")])]),t._v(" "),_("tr",[_("td",[t._v("compareDocumentPosition()")]),t._v(" "),_("td",[t._v("比较当前节点与文档中的另一节点的位置。具体见最上面节点类型的打印值")])]),t._v(" "),_("tr",[_("td",[t._v("操作节点相关方法")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("cloneNode()")]),t._v(" "),_("td",[t._v("参数为布尔值，true时选择克隆这个节点下的所有内容。默认情况下，false，当前节点下被克隆。")])]),t._v(" "),_("tr",[_("td",[t._v("appendChild()")]),t._v(" "),_("td",[t._v("将作为参数的节点作为最后一个子节点添加到当前节点。")])]),t._v(" "),_("tr",[_("td",[t._v("insertBefore()")]),t._v(" "),_("td",[t._v("传入两个节点作为两个参数，将第一个参数节点插入到第二个参数节点之前")])]),t._v(" "),_("tr",[_("td",[t._v("replaceChild()")]),t._v(" "),_("td",[t._v("使用传入的节点替换当前节点")])]),t._v(" "),_("tr",[_("td",[t._v("removeChild()")]),t._v(" "),_("td",[t._v("删除当前节点")])]),t._v(" "),_("tr",[_("td",[t._v("normalize()")]),t._v(" "),_("td",[t._v("合并该元素下的所有文本节点为一个文本节点")])])])]),t._v(" "),_("h2",{attrs:{id:"nodelist-类数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-类数组","aria-hidden":"true"}},[t._v("#")]),t._v(" NodeList 类数组")]),t._v(" "),_("p",[t._v("NodeList是一个节点集合的类数组，有点类似函数中的arguments对象。有长度值length属性。")]),t._v(" "),_("p",[t._v("对于NodeList最重要是的要理解一点：当查询得到一个NodeList集合，它里的节点对象都是动态的，也就是说每当文档结构有变化，已经获取到NodeList集合内的节点对象也是会更新的。因此它始终都会保存着最新的、最准确的节点信息。")]),t._v(" "),_("p",[t._v("在JS中引用NodeList对象都会实时进行一次文档查询，所以在实际中会考虑到这段代码运行性能问题和会导致死循环的问题。正常操作应该尽量减少访问NodeList的次数，或者获取的集合对象用变量缓存起来。")])])}),[],!1,null,null,null);v.default=d.exports}}]);