(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{658:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-常用操作命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-常用操作命令","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 常用操作命令")]),t._v(" "),s("p",[t._v("Git 的操作指令非常多，此处仅选一些简单的日常操作。")]),t._v(" "),s("p",[t._v("安利一篇非常好的教程,特别是图解 Git 命令部分。"),s("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档链接"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/4.1-%E5%9B%BE%E8%A7%A3-Git-%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 Git 命令"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"创建代码仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建代码仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建代码仓库")]),t._v(" "),s("p",[t._v("一般两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("本地初始化仓库，然后再关联到远程仓库")]),t._v(" "),s("li",[t._v("直接克隆远程仓库")])]),t._v(" "),s("p",[t._v("先讲简单的：")]),t._v(" "),s("h3",{attrs:{id:"git-clone-克隆远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-克隆远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git clone")]),t._v(" 克隆远程仓库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/geeeeeeeeek/git-recipes.git\n")])])]),s("p",[t._v("克隆的项目会自动与远程仓库关联。这样我们编辑修改提交后可以直接推送远程仓库。")]),t._v(" "),s("h3",{attrs:{id:"git-init-初始化本地仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-init-初始化本地仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git init")]),t._v(" 初始化本地仓库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个项目目录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" git-projecct\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入项目")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" git-project\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化本地git仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),s("p",[s("code",[t._v("git init")]),t._v("操作后会在当前的目录下增加了一个 .git 目录，现在在仓库的任何操作就可以正常使用 git 相关命令记录了。")]),t._v(" "),s("p",[t._v("如果需要拉取远程代码仓库的代码来工作，则需要先关联远程仓库。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加一个远程仓库跟踪")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 远程仓库名（一般写为origin）url\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本也仓库已关联的所有远程仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有指定远程仓库的详细信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show 仓库名\n")])])]),s("p",[t._v("关联完成之后就可以拉取远程仓库代码对应主分支到本地仓库进行编辑了，并且自动建立本地仓库分支与该远程仓库分支的追踪关系。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-branch-分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git branch")]),t._v(" 分支管理")]),t._v(" "),s("h3",{attrs:{id:"分支创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支创建","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支创建")]),t._v(" "),s("p",[t._v("有两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("基于本地分支新建")]),t._v(" "),s("li",[t._v("基于远程分支新建")])]),t._v(" "),s("p",[s("strong",[t._v("基于本地分支创建新分支")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于当前分支新建本地分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到新分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者一步到位，新建并切换到新分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("此种方式新建的分支如果需要关联到远程仓库对应的分支时，还需要建立新分支与远程对应分支的跟踪关系")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本地分支与远程分支建立跟踪关系track")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to origin/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("origin_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/local_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解除本地分支与远程分支的跟踪关系，这样之后可以与其它远程分支建立追踪关系")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --unset-upstream\n")])])]),s("p",[s("strong",[t._v("基于远程分支创建新分支")])]),t._v(" "),s("p",[t._v("这种方式创建的新分支自动与远程分支建立追踪关系")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于远程分支新建本地分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("origin_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到新分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者一步到位，新建并切换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("origin/origin_branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"分支常用操作命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支常用操作命令","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支常用操作命令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地分支情况：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -v\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看远程分支情况：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有本地分支和远程分支：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看本地分支与远程分支的跟踪关系：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -vv\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地分支：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程分支：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修剪远程已删除的分支：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新分支首次推送，并建立跟踪关系 -u")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-status-git-add-git-commit-文件编辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-status-git-add-git-commit-文件编辑","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git status")]),t._v(" "),s("code",[t._v("git add")]),t._v(" "),s("code",[t._v("git commit")]),t._v(" 文件编辑")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git status 展示信息的三种分类：\n1、Untracked files: (没有tracked过的文件, 即从没有add过的文件)\n2、Changes not staged for commit: (有修改, 但是没有被添加到stage区的文件)\n3、Changes to be committed: (已经在stage区, 等待添加到git本地仓库中的文件)\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 将所有修改添加到暂存区\ngit add .\n\n# 把<path>中所有跟踪文件中被修改过或已删除文件的信息添加到索引库。它不会处理那些不被跟踪的文件。省略<path>表示 . ,即当前目录。\ngit add -u [<path>]\n\n# 表示把中所有跟踪文件中被修改过或已删除文件和所有未跟踪的文件信息添加到索引库。省略<path>表示 . ,即当前目录。\ngit add -A: [<path>]\n\n# 我们可以通过git add -i 命令查看中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看<path>中所有未跟踪的文件，同时进入一个子命令系统。\ngit add -i [<path>]\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 信息备注最好符合一定约定，能变更的类型，影响范围，备注说明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix<all> the commit message"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会先把所有已经track的文件的改动`git add`进来，然后提交(有点像svn的一次提交,不用先暂存)。对于没有track的文件,还是需要执行`git add <file>` 命令。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("h2",{attrs:{id:"git-rm-文件删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rm-文件删除","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git rm")]),t._v(" 文件删除")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 物理删除电脑文件，shell命令： rm")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" file_name\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -r dir_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除git本地仓库的文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" file_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除文件夹")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -r dir_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看要删除的文件信息，并没有执行删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -n file_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除暂存区文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cache\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将删除文件信息提交git commit才算完整删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 git rm 删除文件了但还没补git commit 时,想恢复可以使用git add -i 选择revert, 再git checkout -- filename")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-remote-远程仓库管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-remote-远程仓库管理","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("git remote")]),t._v(" 远程仓库管理")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加一个远程仓库跟踪：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("默认origin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" url\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地已跟踪的所有远程仓库：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只显示远程仓库名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要显示url信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有指定远程仓库的详细信息,包括所有分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("仓库名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重命名本地已跟踪的远程仓库：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("old_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除一个已跟踪的远程仓库：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("仓库名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 远程仓库的url改变后需要在本地更换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# （常见的情形是远程仓库变更了项目所有者时，url会改变，此时本地需要重新更改url）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("仓库名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new_url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看远程仓库的url")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote get-url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("仓库名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"实践案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实践案例","aria-hidden":"true"}},[t._v("#")]),t._v(" 实践案例")]),t._v(" "),s("p",[s("strong",[t._v("实践 1：删除远程仓库的文件或目录，几个步骤:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、先执行拉取最新代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#2、在本地git仓库执行删除，如果是目录添加 -r")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" name\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、提交删除操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'delete name'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4、推送到远程仓库才能将远程仓库文件夹删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),s("p",[s("strong",[t._v("实践 2：远程仓库的 url 变更，需要重新绑定")])]),t._v(" "),s("p",[t._v("有两种方法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. 直接修改 url 命令： git remote set-url origin new_url 此时分支的远程跟踪关系会自动更新追踪关系\n\n2. 先直接删除跟踪的远程仓库，再重新绑定一个新 url：\n    git remote rm origin git remote add origin new_url 此时引用分支的关系需要重新绑定跟踪关系\n    git branch --set-upstream-to=origin/origin_branch_name\n")])])]),s("p",[s("strong",[t._v("实践 3：将远程仓库 old_origin 的分支单独拆出来，到一个新的远程仓库 new_origin")])]),t._v(" "),s("ol",[s("li",[t._v("远程新建一个仓库，并初始化 master 分支")]),t._v(" "),s("li",[t._v("本地新建一文件夹，并初始化为新的本地仓库： git init")]),t._v(" "),s("li",[t._v("将 old_origin 的目标分支 target 检出到本地仓库作为 master 分支：git fetch old_origin target 然后 git merge target")]),t._v(" "),s("li",[t._v("git add . 然后 git commit -m 'fetch target' 提交本次拉取和全并的修改，git status 查看保证清空暂区")]),t._v(" "),s("li",[t._v("git remote set-url origin new_url 将远程仓库重新绑定到新仓库的 url")]),t._v(" "),s("li",[t._v("git fetch origin master")]),t._v(" "),s("li",[t._v("git merge --allow-unrelated-histories origin/master 此时 merge 因为旧仓库的 commit 记录与新仓库的 commit 来源不同，所以需要带上--allow-unrelated-histories 参数允许合并两者的提交记录。")]),t._v(" "),s("li",[t._v("git push -u origin master 首次提交到远程仓库。如果 merge 步骤有冲突需要手动解决冲突后推送。此步骤也可以分为两步：先绑定分支跟踪关系：git branch --set-upstream-to=origin/master 然后 git push")])]),t._v(" "),s("p",[s("strong",[t._v("实践 4：修剪远程分支")])]),t._v(" "),s("p",[t._v("在多个协作过程中，如果成员 A 删除了远程分支 branch_A, 在人员 B 中查看时"),s("code",[t._v("git branch -a")]),t._v("，branch_A 分支会仍然显示，要不显示，需要修剪在本地的远程分支数据。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git branch -a")]),t._v(" 或 "),s("code",[t._v("git branch -r")]),t._v(" 时，往往显示的分支比实际远程代码库的分支更多，这是因为本地存在远程已经删除的废弃分支")]),t._v(" "),s("li",[s("code",[t._v("git remote show origin")]),t._v(" 可以显示本地远程仓库的所有信息，包括所有分支，其中废弃分支会标识为"),s("strong",[t._v("stale")]),t._v("，表明该分支在远程仓库已经不存在。")]),t._v(" "),s("li",[s("code",[t._v("git remote prune origin")]),t._v(" 可以删除掉标识为"),s("strong",[t._v("stale")]),t._v("的分支，使本地仓库分支与远程仓库分支一致。")])]),t._v(" "),s("h2",{attrs:{id:"git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log","aria-hidden":"true"}},[t._v("#")]),t._v(" git log")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/0805b5d5d893",target:"_blank",rel:"noopener noreferrer"}},[t._v("git log 的使用"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("short\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("full\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("fuller\n")])])]),s("h2",{attrs:{id:"git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash","aria-hidden":"true"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/anhenzhufeng/article/details/78052418",target:"_blank",rel:"noopener noreferrer"}},[t._v("git切换到别的分支,要暂时保存当前分支的修改(不想进行add 和commit)的方法 git stash"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://www.jianshu.com/p/a4603dcffbad",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git（2）-暂存区的作用（idea版本解决暂存区存在文件时pull和merge问题"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"git配置credential-helper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git配置credential-helper","aria-hidden":"true"}},[t._v("#")]),t._v(" Git配置credential helper")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/wzy901213/article/details/84334163",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git配置credential helper"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("当修改 gitlab 用户名或密码后再使用会报错：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\n")])])]),s("p",[t._v("此时，可以有两种方式解决：")]),t._v(" "),s("ol",[s("li",[t._v("第一种，windows 搜索 凭据，打开凭据管理查找到 gitlab 凭证进行修改")]),t._v(" "),s("li",[t._v("第二种：先清除凭证，再存储凭证：")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置用户名+密码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --system --unset credential.helper\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储用户名+密码，会在 $HOME 目录生成 .git-credential 文件明文存储 gitlab 含有用户名和密码的地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper store\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 之后，手动输入一次，后面就不需要再输入。")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);