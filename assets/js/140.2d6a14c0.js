(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{679:function(t,s,a){"use strict";a.r(s);var r=a(0),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module","aria-hidden":"true"}},[t._v("#")]),t._v(" module")]),t._v(" "),a("h2",{attrs:{id:"什么是模块？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是模块？")]),t._v(" "),a("ol",[a("li",[t._v("在过去很长一段时间里，js 这门语言并没有模块的这一概念。在网页的原始开发时代，js 之父（Brendan Eich)最初设计这门语言时只是将它定位一个小型的脚本语言。js 是作为 HTML 文件的辅助脚本文件，去解决一些表单交互问题，也是 js 发明的原因。因为 web 网页需求很简单，几行 js 代码嵌入 html 文件的 script 标签中即可完成需求。")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'蛮荒时代'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("但随着时代发展，特别是 AJAX 的出现，一个 web 应用越来越复杂，JS 的角色也越来越重，网页应用需要的脚本文件从嵌入 script 标签中，改变到需要通过 script 标签引入。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'古代'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("再发展下去，一个网页应用的脚本代码都不适合全部放在一个 js 文件中，按照功能逻辑我们拆分出许多.js 文件，然后在通过多个 script 标签引入。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script scr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"utils.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utils.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'近代'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("伴随 2009 年 node 一起出现的 commonjs 模块化规范，让社区对浏览器端的 js 模块化进行不断尝试，并依次出现了浏览器端的 AMD、CMD 模块化规范。在社区对模块化概念的普及和推动下，在 ES6 的语言规范中，正式定义了 js 模块标准，即 ES Module 规范。使这门语言在诞生了 20 年之后拥有了模块标准。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utils.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utils.js'")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'现代'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("相比较下，多个"),a("code",[t._v("<script>")]),t._v("引入 js 文件的做法有很多缺点：")]),t._v(" "),a("ul",[a("li",[t._v("需要手动维护 js 文件的加载顺序。因为多个 js 文件之前通常都有依赖关系，而且是隐式，需要小心使用。")]),t._v(" "),a("li",[t._v("多个 script 标签的存在，导致需要向服务器请求次数的增多。每一个 js 文件都需要请求一次，在 http2 还没出现的时间，网络请求的成本是很高的，过多请求会严重拖慢网页加载速度。")]),t._v(" "),a("li",[t._v("在引入的每个 js 文件，顶层作用域即全局作用域，变量和函数的声明很容易造成全局作用域的污染。虽然也有很多此类的最佳实践，比如自执行函数 IFFE 模式、命名空间、jQuery 模式等方式来避免全局作用域污染问题。")])]),t._v(" "),a("p",[t._v("而模块化则很好解决上述问题：")]),t._v(" "),a("ul",[a("li",[t._v("通过导入导出接口，可以清晰看到模块间的依赖关系。")]),t._v(" "),a("li",[t._v("模块可以借助工具进行打包，在页面中只需要加载合并后的资源文件，减少网络请求。")]),t._v(" "),a("li",[t._v("模块间作用域隔离，不会出现命名冲突。")])]),t._v(" "),a("h2",{attrs:{id:"模块标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块标准","aria-hidden":"true"}},[t._v("#")]),t._v(" 模块标准")]),t._v(" "),a("p",[a("strong",[t._v("CommonJs")]),t._v("\n语法：\n导出： module.exports = {} exports = {}\n导入： require()\n特点： 一句话总结：值的浅拷贝，运行时加载")]),t._v(" "),a("ul",[a("li",[t._v("模块内隐含"),a("code",[t._v("module")]),t._v("对象，记录该模块相关信息，包括 id，name，exports，loaded 等")]),t._v(" "),a("li",[t._v("模块隐式声明一个简写语句：var exports = module.exports")]),t._v(" "),a("li",[t._v("因为模块导出是一个对象，对象只有运行时生成，所以 commonJs 模块是动态运行时确定模块内容的。")]),t._v(" "),a("li",[t._v("因为模块导出是一个对象，所以导出模块是一个值的浅拷贝。（用对象的内存模式理解，基本类型是值的完全复制，引用类型是内存地址的引用）")]),t._v(" "),a("li",[t._v("该规范使用导入模块会缓存模块，只会在第一次完全运行模块内代码，第二次开始都是从缓存内取值。导入 require 时会建议一个缓存对象存放模块")])]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("ul",[a("li",[t._v("在 Node 的默认规范，基本使用在 node 环境。")]),t._v(" "),a("li",[t._v("在浏览器环境使用需要使用工具转换，比如 Browserify")])]),t._v(" "),a("p",[a("strong",[t._v("ES Module")]),t._v("\n语法：\n导出： 默认导出：export default 或 命名导出：export 或 export {}\n导入： import anyname from 'path' 或 import { } from 'path' 命名导出时名称一一对应，或使用"),a("code",[t._v("as")]),t._v("重命名\n特点： 一句话总结：值的引用，编译时链接")]),t._v(" "),a("ul",[a("li",[t._v("ES module 默认使用严格模式。")]),t._v(" "),a("li",[t._v("是在静态编译时确定模块关系的。可以把 ES Module 理解为只是建立了两个模块间的一种连接关系或者叫值的映射关系。")]),t._v(" "),a("li",[t._v("当使用默认导出时，相当于导出对象 default，此时表现相同于 commonjs，对基本类型变量导入，在导出模块内值改变并不会表现在导入的使用模块内。引用类型可以实时更新。（也是可以用对象内存模式理解，因为基本类型赋值给变量属性时都是值的拷贝，而引用类型是内存地址的引用）")]),t._v(" "),a("li",[t._v("ES module 的映射特征在命名导出时体现最为突出，此时不管是基本类型还是引用类型值，在导入和导出模块，值都是一种映射关系，实时更新。当在导出模块内变化，导入模块使用时也是最新的值。")])]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("ul",[a("li",[t._v("在浏览器中直接使用，需要"),a("code",[t._v("script")]),t._v("标签声明"),a("code",[t._v('type="module"')]),t._v("后才可以使用"),a("code",[t._v("import")]),t._v("引入模块。如"),a("code",[t._v('<srcipt type="module"><\/script>')])]),t._v(" "),a("li",[t._v("在 node 环境因为 commonJs 的历史原因，暂未完成支持，只有部分实验性的方法。如采用 ES module 规范的模块使用"),a("code",[t._v(".mjs")]),t._v("后缀命名，可以使用 cli 命令"),a("code",[t._v("node --experimental-modules module_name.mjs")])])]),t._v(" "),a("p",[a("strong",[t._v("AMD")]),t._v("\n语法：\n导出： define('module"),a("em",[t._v("name', ['other_module_depend'], function() {/_return 出相关代码")]),t._v("/})\n导入： require(['module_name'], function(module*name) {/*导入成功执行的回调_/})\n特点： 通过 AMD 形式定义的模块加载是非阻塞的，适合在浏览器中使用。但采用回调的方法和浏览器异步回调会出现回调地狱问题一样，在实现应用中越来越少，逐步被标准化的 ES module 形式替代")]),t._v(" "),a("h2",{attrs:{id:"模块打包工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块打包工具","aria-hidden":"true"}},[t._v("#")]),t._v(" 模块打包工具")]),t._v(" "),a("p",[t._v("模块打包工具的基本任务就是解决模块间的依赖，使其打包后的结果能运行在浏览器上。\n出现过的模块管理工具包括 requirejs、browserify、webpack、parcel、rollup")]),t._v(" "),a("p",[t._v("前两种基本退出舞台，而 parcel、rollup 比较新、功能更为专注。webpack 优势更为突出。")]),t._v(" "),a("ul",[a("li",[t._v("webpck 默认支持 commonjs、AMD、ES Module。")]),t._v(" "),a("li",[t._v("webpack 有完备的代码分割（code splitting）和摇树优化（tree shaking）功能")]),t._v(" "),a("li",[t._v("webpack 可以处理各类资源，不只 js 文件，还包括网页开发中的 HTML 模板、CSS 预处理器语法、图片、字体等。")])]),t._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/Leo_wl/p/4869090.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈 JavaScript 模块化"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/Leo_wl/p/4869090.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端模块简史"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/module-loader#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("Module 加载实现，阮一峰 ES6 入门"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/ChenChunChang/p/8296373.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES modules 基本用法、模块继承、跨模块常量、import()"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);