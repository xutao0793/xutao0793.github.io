(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{225:function(t,s,a){t.exports=a.p+"assets/img/js_01.2ce34a28.jpg"},621:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"《javascritp-启示录》"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#《javascritp-启示录》","aria-hidden":"true"}},[t._v("#")]),t._v(" 《JavaScritp 启示录》")]),t._v(" "),n("p",[n("img",{attrs:{src:a(225),alt:"js_01.jpg"}}),t._v("\n2014年3月第1版")]),t._v(" "),n("p",[t._v("这不是一本关于JS概念很全的参考书，全书的内容主要集中在JS的核心内容：Object对象和Function对象。")]),t._v(" "),n("ul",[n("li",[t._v("Object对象：对象创建、对象属性、对象原型")]),t._v(" "),n("li",[t._v("Function对象：函数、作用域、闭包、this")])]),t._v(" "),n("p",[t._v("这本书适合作为《深入理解 JavaScript》这本书的补充。两本书结合起来看更好。")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_1-p22页，-订正：typeof-正则的结果也是对象"}},[t._v("1. P22页， 订正：typeof 正则的结果也是对象")])]),n("li",[n("a",{attrs:{href:"#_2-p28页，javascript-对象-和-object-对象不要混淆"}},[t._v("2. p28页，JavaScript 对象 和 Object() 对象不要混淆")])]),n("li",[n("a",{attrs:{href:"#_3-p34页，delete-删除对象属性"}},[t._v("3. p34页，delete 删除对象属性")])]),n("li",[n("a",{attrs:{href:"#_4-p37页，对象属性的引用"}},[t._v("4. p37页，对象属性的引用")])]),n("li",[n("a",{attrs:{href:"#_5-p70页，如何确定-this-的值"}},[t._v("5. P70页，如何确定 this 的值")])]),n("li",[n("a",{attrs:{href:"#_6-p66页，使用-var-声明变量和不使用-var声明变量的细微差别"}},[t._v("6. p66页，使用 var 声明变量和不使用 var声明变量的细微差别")])]),n("li",[n("a",{attrs:{href:"#_7-p81页，函数声明或定义时确定作用域，为词法作用域，而非调用时确定。"}},[t._v("7. p81页，函数声明或定义时确定作用域，为词法作用域，而非调用时确定。")])]),n("li",[n("a",{attrs:{href:"#_8-p84页，关于原型"}},[t._v("8. p84页，关于原型")])]),n("li",[n("a",{attrs:{href:"#_9-p90页，js的动态性还体现在：继承原型属性的实例对象总是能够获得新的属性值"}},[t._v("9. p90页，js的动态性还体现在：继承原型属性的实例对象总是能够获得新的属性值")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"_1-p22页，-订正：typeof-正则的结果也是对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-p22页，-订正：typeof-正则的结果也是对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. P22页， 订正：typeof 正则的结果也是对象")]),t._v(" "),n("blockquote",[n("p",[t._v("主流浏览器 IE/Firefox/Opera/Google 都返回 'object'，而 Sarfari，在3.x版本系统列中，返回的是‘function'，5.x版本后与其它浏览器调整为一致。 -----《JavaScript 语言精髓》 P104 译注")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myRegExp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\bt[a-z]+\\\\b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" myRegExp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 object，并不是 function")]),t._v("\n")])])]),n("h2",{attrs:{id:"_2-p28页，javascript-对象-和-object-对象不要混淆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-p28页，javascript-对象-和-object-对象不要混淆","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. p28页，JavaScript 对象 和 Object() 对象不要混淆")]),t._v(" "),n("ul",[n("li",[t._v("JavaScript 对象通常指表示 JavaScript 中所有可作为对象的值")]),t._v(" "),n("li",[t._v("Object() 是一个通用对象的构造函数，或者说是用于生成通用对象的容器。其创建出来的对象是 JS 中一种特定类型的值，这个类型 Object 类型。就像 Array() 数组构造函数生成数组类型的对象一样。")])]),t._v(" "),n("h2",{attrs:{id:"_3-p34页，delete-删除对象属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-p34页，delete-删除对象属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. p34页，delete 删除对象属性")]),t._v(" "),n("ul",[n("li",[t._v("delete 操作符可以用于将属性从一个对象中完全删除，但不会删除在对象原型链上的属性。")]),t._v(" "),n("li",[t._v("delete 是将属性从一个对象中删除的唯一方法。将属性赋值为 undefined 或 null 只能改变属性的值，并不会将属性从对象中删除。")]),t._v(" "),n("li",[t._v("如果要放弃一个对象类型的值，可以将整个对象值赋值为 null，这样切断该对象的所有引用，待JS垃圾回收时清空该对象存储对应的内存空间。")])]),t._v(" "),n("h2",{attrs:{id:"_4-p37页，对象属性的引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-p37页，对象属性的引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. p37页，对象属性的引用")]),t._v(" "),n("p",[t._v("记住一点，当调用对象属性时，属性查找总是会发生，不是在对象自身属性中查找，就是在对象所属的原型链上查找属性。只有当链中最一个节点 "),n("code",[t._v("Object.prototype")]),t._v(" 对象上还没有查找到需要引用的属性时，才视为未定义的属性，即返回 "),n("code",[t._v("undefined")]),t._v("。这个属性查找过程就是 JavaScript 处理继承和属性引用的过程。")]),t._v(" "),n("h2",{attrs:{id:"_5-p70页，如何确定-this-的值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-p70页，如何确定-this-的值","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. P70页，如何确定 this 的值")]),t._v(" "),n("ul",[n("li",[t._v("this 值会作为所有函数的默认参数，可以在函数体内直接使用。")]),t._v(" "),n("li",[t._v("this 值基于在运行时调用函数的上下文对象。依据函数调用的方式主要有四种情况：\n"),n("ul",[n("li",[t._v("函数作为对象方法调用时，this 指向该对象")]),t._v(" "),n("li",[t._v("函数作为构造函数调用时，this 指向该构造函数创建的实例对象")]),t._v(" "),n("li",[t._v("函数作为原型对象属性时，this 指向该原型的实例对象")]),t._v(" "),n("li",[t._v("函数直接调用，此时函数视为在全局上下文中调用，this 指向全局对象")]),t._v(" "),n("li",[t._v("使用函数对象自身的 "),n("code",[t._v("call / apply / bind")]),t._v("属性调用时，this 指向其显性传入的对象")])])])]),t._v(" "),n("h2",{attrs:{id:"_6-p66页，使用-var-声明变量和不使用-var声明变量的细微差别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-p66页，使用-var-声明变量和不使用-var声明变量的细微差别","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. p66页，使用 var 声明变量和不使用 var声明变量的细微差别")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://stackoverflow.com/questions/1470488/what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-or-omit-it#answer-1471738",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/questions/1470488/what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-or-omit-it#answer-1471738"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("共同点：成为全局对象的属性")]),t._v(" "),n("ul",[n("li",[t._v("在全局作用域下，使用var 声明的变量会成为全局对象 window 的属性")]),t._v(" "),n("li",[t._v("不管在哪里，如果直接赋值给一个未经声明的变量，那该变量都会成为全局变量，即成为全局对象 window 的属性")])]),t._v(" "),n("p",[t._v("差别：")]),t._v(" "),n("ul",[n("li",[t._v("var 声明的变量成为全局对象的属性后，不可删除，即该属性描述符中 configurable 值为false")]),t._v(" "),n("li",[t._v("未经声明的隐性全局变量，可删除，即该属性的描述符中 configrable 值为true")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在全局作用域下")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\nb "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),t._v("\n\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    configurable: false\n    enumerable: true\n    value: 123\n    writable: true\n*/")]),t._v("\n\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    configurable: true\n    enumerable: true\n    value: 123\n    writable: true\n*/")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false, 在严格模式下报错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("p",[t._v("这里引申下 "),n("code",[t._v("delete")]),t._v(" 操作符的一些特征")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN delete 操作符"),n("OutboundLink")],1)])]),t._v(" "),n("ul",[n("li",[t._v("如果你试图删除的属性不存在，那么delete将不会起任何作用，但仍会返回true")]),t._v(" "),n("li",[t._v("如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，delete操作只会在自身的属性上起作用）")]),t._v(" "),n("li",[t._v("任何使用 var 声明的属性不能从全局作用域或函数的作用域中删除。")]),t._v(" "),n("li",[t._v("delete操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）,但在对象(object)中的函数是能够用delete操作删除的。")]),t._v(" "),n("li",[t._v("任何用let或const声明的属性不能够从它被声明的作用域中删除。")]),t._v(" "),n("li",[t._v("不可设置的(Non-configurable)属性不能被移除。这意味着像Math, Array, Object内置对象的属性以及使用Object.defineProperty()方法设置为不可设置的属性不能被删除。")])]),t._v(" "),n("p",[t._v("所以总结起来就是：")]),t._v(" "),n("ul",[n("li",[t._v("使用了 var let const function 声明的变量，其属性描述符的 configurable 值为 false。")]),t._v(" "),n("li",[t._v("delete操作不能删除属性描述符 onfigurable 值为 false，在非严格模式下返回 false, 在严格模式下抛出语法错误（SyntaxError）")])]),t._v(" "),n("h2",{attrs:{id:"_7-p81页，函数声明或定义时确定作用域，为词法作用域，而非调用时确定。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-p81页，函数声明或定义时确定作用域，为词法作用域，而非调用时确定。","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. p81页，函数声明或定义时确定作用域，为词法作用域，而非调用时确定。")]),t._v(" "),n("ul",[n("li",[t._v("函数声明或定义时确定该函数的词法作用域，即静态作用域，在函数编译阶段时确定")]),t._v(" "),n("li",[t._v("函数作用域链是指词法作用域嵌套形成关系链，主要用于函数上下文内属性的查找。（即变量的引用沿作用域查找，对象属性的引用沿原型链查找，这是JS两套链式规则。）")]),t._v(" "),n("li",[t._v("this 值的确定有点类似动态作用域的概念，在函数执行执行阶段确定。")]),t._v(" "),n("li",[t._v("闭包是由作用域引起的。")])]),t._v(" "),n("h2",{attrs:{id:"_8-p84页，关于原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-p84页，关于原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 8. p84页，关于原型")]),t._v(" "),n("ul",[n("li",[t._v("任何JS函数，包括构造函数和普通函数，都实现了 "),n("code",[t._v("prototype")]),t._v(" 属性，即 Fn.prototype 指向一个对象类型的值，称为原型对象")]),t._v(" "),n("li",[t._v("任何JS对象，都有一个内部属性"),n("code",[t._v("[[prototype]]")]),t._v("，指向其原型对象，与该对象的构造函数的"),n("code",[t._v("prototype")]),t._v("属性指向同一个原型对象。在实例对象中可以通过浏览器实现的"),n("code",[t._v("__proto__")]),t._v("非标准属性引用其原型对象，或通过ES6规定的标准方法"),n("code",[t._v("Ojbect.getPrototypeOf(obj)")]),t._v("来引用该原型对象。")]),t._v(" "),n("li",[t._v("原生的原型对象默认有一个"),n("code",[t._v("constructor")]),t._v("属性，指向实例对象的构造函数。如果用一个新对象替换了"),n("code",[t._v("prototype")]),t._v("属性，会删除默认的构造函数属性。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 此时实例对象foo引用的 constructor 属性其实是在其原型对象上查找到的。")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时重写了 Foo 的原型对象，就会切断实例对象的构造函数引用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以一般在面向对象继承中，如果需要更改原型对象时，需要重写constructor属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("constructor：Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"_9-p90页，js的动态性还体现在：继承原型属性的实例对象总是能够获得新的属性值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-p90页，js的动态性还体现在：继承原型属性的实例对象总是能够获得新的属性值","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. p90页，js的动态性还体现在：继承原型属性的实例对象总是能够获得新的属性值")]),t._v(" "),n("p",[t._v("即当我们向原型添加一个新的属性时，该属性对所有基于该原型的实例对象都是可见的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getName")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo_1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo_2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfoo_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfoo_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当在原型上新增一个属性时，之前创建的实例对象也能及时获取")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFullName")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fullname: '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfoo_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);